# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-15 23:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><body><div><div><div>
#: sedout/loadext.html:6 sedout/loadext.html:121
msgid "Run-Time Loadable Extensions"
msgstr ""

#. type: Content of: <html><body><div><a>
#: sedout/loadext.html:11
msgid "<a href=\"index.html\">"
msgstr ""

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/loadext.html:12
msgid "SQLite"
msgstr ""

#. type: Content of: <html><body><div><div>
#: sedout/loadext.html:16
msgid "Small. Fast. Reliable."
msgstr ""

#. type: Content of: <html><body><div><div><br>
#: sedout/loadext.html:16
msgid "Choose any three."
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/loadext.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/loadext.html:21
msgid "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/loadext.html:22 sedout/loadext.html:34
msgid "<a href='about.html'>About</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/loadext.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/loadext.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/loadext.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/loadext.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/loadext.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/loadext.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/loadext.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/loadext.html:36
msgid "<a href='download.html'>Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/loadext.html:37
msgid "<a href='support.html'>Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/loadext.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><form><select>
#: sedout/loadext.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/loadext.html:44
msgid "Search Documentation"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/loadext.html:45
msgid "Search Changelog"
msgstr ""

#. type: Content of: <html><body><div><div><form>
#: sedout/loadext.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr ""

#. type: Content of: <html><body><script>
#: sedout/loadext.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( "
"w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ "
"w.style.display = \"block\"; } } function toggle_search() { var w = "
"document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ "
"w.style.display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function "
"div_off(nm){document.getElementById(nm).style.display=\"none\";} "
"window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the "
"Search feature if we are not operating from CGI, since */ /* Search is "
"accomplished using CGI and will not work without it. */ if( !location.origin "
"|| !location.origin.match || !location.origin.match(/http/) ){ "
"document.getElementById(\"search_menubutton\").style.display = \"none\"; } "
"/* Used by the Hide/Show button beside syntax diagrams, to toggle the */ "
"function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = "
"document.getElementById(btn); if( x.style.display!='none' ){ x.style.display "
"= 'none'; b.innerHTML='show'; }else{ x.style.display = ''; "
"b.innerHTML='hide'; } return false; } var antiRobot = 0; function "
"antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = "
"document.getElementById(\"mtimelink\"); if(j && "
"j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } "
"function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot "
"|= 2; antiRobotGo(); document.body.onmousedown=null; } "
"document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); "
"document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; "
"antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"
msgstr ""

#. type: Content of: <html><body><div><div><div>
#: sedout/loadext.html:124
msgid ""
"<a onclick=\"toggle_toc()\"> <span class=\"fancy_toc_mark\" "
"id=\"toc_mk\">&#x25ba;</span> Table Of Contents </a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:128
msgid "<a href=\"#overview\">1. Overview</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:129
msgid "<a href=\"#loading_an_extension\">2. Loading An Extension</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:130
msgid ""
"<a href=\"#compiling_a_loadable_extension\">3. Compiling A Loadable "
"Extension</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:131
msgid ""
"<a href=\"#programming_loadable_extensions\">4. Programming Loadable "
"Extensions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:132
msgid "<a href=\"#example_extensions\">4.1. Example Extensions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:133
msgid ""
"<a href=\"#persistent_loadable_extensions\">5. Persistent Loadable "
"Extensions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:134
msgid ""
"<a href=\"#statically_linking_a_run_time_loadable_extension\">6. Statically "
"Linking A Run-Time Loadable Extension</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/loadext.html:135
msgid "<a href=\"#implementation_details\">7. Implementation Details</a>"
msgstr ""

#. type: Content of: <html><body><div><div><script>
#: sedout/loadext.html:139
msgid ""
"function toggle_toc(){ var sub = document.getElementById(\"toc_sub\")  var "
"mk = document.getElementById(\"toc_mk\")  if( sub.style.display!=\"block\" "
"){ sub.style.display = \"block\"; mk.innerHTML = \"&#x25bc;\"; } else { "
"sub.style.display = \"none\"; mk.innerHTML = \"&#x25ba;\"; } }"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/loadext.html:157
msgid "<span>1. </span>Overview"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:159
msgid ""
"SQLite has the ability to load extensions (including new <a "
"href=\"appfunc.html\">application-defined SQL functions</a>, <a "
"href=\"datatype3.html#collation\">collating sequences</a>, <a "
"href=\"vtab.html\">virtual tables</a>, and <a href=\"vfs.html\">VFSes</a>) "
"at run-time.  This feature allows the code for extensions to be developed "
"and tested separately from the application and then loaded on an as-needed "
"basis."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:166
msgid ""
"Extensions can also be statically linked with the application.  The code "
"template shown below will work just as well as a statically linked extension "
"as it does as a run-time loadable extension except that you should give the "
"entry point function (\"sqlite3_extension_init\")  a different name to avoid "
"name collisions if your application contains two or more extensions."
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/loadext.html:173
msgid "<span>2. </span>Loading An Extension"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:175
msgid ""
"An SQLite extension is a shared library or DLL.  To load it, you need to "
"supply SQLite with the name of the file containing the shared library or DLL "
"and an entry point to initialize the extension.  In C code, this information "
"is supplied using the <a "
"href=\"c3ref/load_extension.html\">sqlite3_load_extension()</a> API.  See "
"the documentation on that routine for additional information."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:182
msgid ""
"Note that different operating systems use different filename suffixes for "
"their shared libraries.  Windows uses \".dll\", Mac uses \".dylib\", and "
"most unixes other than mac use \".so\".  If you want to make your code "
"portable, you can omit the suffix from the shared library filename and the "
"appropriate suffix will be added automatically by the <a "
"href=\"c3ref/load_extension.html\">sqlite3_load_extension()</a> interface."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:189
msgid ""
"There is also an SQL function that can be used to load extensions: <a "
"href=\"lang_corefunc.html#load_extension\">load_extension(X,Y)</a>.  It "
"works just like the <a "
"href=\"c3ref/load_extension.html\">sqlite3_load_extension()</a> C interface."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:193
msgid ""
"Both methods for loading an extension allow you to specify the name of an "
"entry point for the extension.  You can leave this argument blank - passing "
"in a NULL pointer for the <a "
"href=\"c3ref/load_extension.html\">sqlite3_load_extension()</a> C-language "
"interface or omitting the second argument for the <a "
"href=\"lang_corefunc.html#load_extension\">load_extension()</a> SQL "
"interface - and the extension loader logic will attempt to figure out the "
"entry point on its own.  It will first try the generic extension name "
"\"sqlite3_extension_init\".  If that does not work, it constructs a entry "
"point using the template \"sqlite3_X_init\" where the X is replaced by the "
"lowercase equivalent of every ASCII character in the filename after the last "
"\"/\" and before the first following \".\" omitting the first three "
"characters if they happen to be \"lib\".  So, for example, if the filename "
"is \"/usr/lib/libmathfunc-4.8.so\" the entry point name would be "
"\"sqlite3_mathfunc_init\".  Or if the filename is \"./SpellFixExt.dll\" then "
"the entry point would be called \"sqlite3_spellfixext_init\"."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:210
msgid ""
"For security reasons, extension loading is turned off by default.  In order "
"to use either the C-language or SQL extension loading functions, one must "
"first enable extension loading using the <a "
"href=\"c3ref/db_config.html\">sqlite3_db_config</a>(db,<a "
"href=\"c3ref/c_dbconfig_defensive.html#sqlitedbconfigenableloadextension\">SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION</a>,1,NULL)  "
"C-language API in your application."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:216
msgid ""
"From the <a href=\"cli.html\">command-line shell</a>, extensions can be "
"loaded using the \".load\" dot-command.  For example:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:220
#, no-wrap
msgid ".load ./YourCode\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:223
msgid ""
"Note that the command-line shell program has already enabled extension "
"loading for you (by calling the <a "
"href=\"c3ref/enable_load_extension.html\">sqlite3_enable_load_extension()</a> "
"interface as part of its setup) so the command above works without any "
"special switches, setup, or other complications."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:228
msgid ""
"The \".load\" command with one argument invokes sqlite3_load_extension()  "
"with the zProc parameter set to NULL, causing SQLite to first look for an "
"entry point named \"sqlite3_extension_init\" and then \"sqlite3_X_init\" "
"where \"X\" is derived from the filename.  If your extension has an entry "
"point with a different name, simply supply that name as the second "
"argument.  For example:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:236
#, no-wrap
msgid ".load ./YourCode nonstandard_entry_point\n"
msgstr ""

#. type: Content of: <html><body><div>
#: sedout/loadext.html:239
msgid "<a name=\"build\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/loadext.html:241
msgid "<span>3. </span>Compiling A Loadable Extension"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:243
msgid ""
"Loadable extensions are C-code.  To compile them on most unix-like operating "
"systems, the usual command is something like this:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:248
#, no-wrap
msgid "gcc -g -fPIC -shared YourCode.c -o YourCode.so\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:251
msgid ""
"Macs are unix-like, but they do not follow the usual shared library "
"conventions.  To compile a shared library on a Mac, use a command like this:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:256
#, no-wrap
msgid "gcc -g -fPIC -dynamiclib YourCode.c -o YourCode.dylib\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:259
msgid ""
"If when you try to load your library you get back an error message that says "
"\"mach-o, but wrong architecture\" then you might need to add command-line "
"options \"-arch i386\" or \"arch x86_64\" to gcc, depending on how your "
"application is built."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:264
msgid ""
"To compile on Windows using MSVC, a command similar to the following will "
"usually work:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:268
#, no-wrap
msgid "cl YourCode.c -link -dll -out:YourCode.dll\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:271
msgid ""
"To compile for Windows using MinGW, the command line is just like it is for "
"unix except that the output file suffix is changed to \".dll\" and the -fPIC "
"argument is omitted:"
msgstr ""

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/loadext.html:276
#, no-wrap
msgid "gcc -g -shared YourCode.c -o YourCode.dll\n"
msgstr ""

#. type: Content of: <html><body><div>
#: sedout/loadext.html:279
msgid "<a name=\"write\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/loadext.html:281
msgid "<span>4. </span>Programming Loadable Extensions"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:283
msgid "A template loadable extension contains the following three elements:"
msgstr ""

#. type: Content of: <html><body><div><ol><li>
#: sedout/loadext.html:287
msgid ""
"Use \"<tt>#include &lt;sqlite3ext.h&gt;</tt>\" at the top of your source "
"code files instead of \"<tt>#include &lt;sqlite3.h&gt;</tt>\"."
msgstr ""

#. type: Content of: <html><body><div><ol><li>
#: sedout/loadext.html:292
msgid ""
"Put the macro \"<tt>SQLITE_EXTENSION_INIT1</tt>\" on a line by itself right "
"after the \"<tt>#include &lt;sqlite3ext.h&gt;</tt>\" line."
msgstr ""

#. type: Content of: <html><body><div><ol><li>
#: sedout/loadext.html:297
msgid ""
"Add an extension loading entry point routine that looks like something the "
"following:"
msgstr ""

#. type: Content of: <html><body><div><ol><li><div><pre>
#: sedout/loadext.html:300
#, no-wrap
msgid ""
"#ifdef _WIN32\n"
"__declspec(dllexport)\n"
"#endif\n"
"int sqlite3_extension_init( /* &lt;== Change this name, maybe */\n"
"  sqlite3 *db, \n"
"  char **pzErrMsg, \n"
"  const sqlite3_api_routines *pApi\n"
"){\n"
"  int rc = SQLITE_OK;\n"
"  SQLITE_EXTENSION_INIT2(pApi);\n"
"  /* insert code to initialize your extension here */\n"
"  return rc;\n"
"}\n"
msgstr ""

#. type: Content of: <html><body><div><ol><li>
#: sedout/loadext.html:315
msgid ""
"You will do well to customize the name of your entry point to correspond to "
"the name of the shared library you will be generating, rather than using the "
"generic \"sqlite3_extension_init\" name.  Giving your extension a custom "
"entry point name will enable you to statically link two or more extensions "
"into the same program without a linker conflict, if you later decide to use "
"static linking rather than run-time linking.  If your shared library ends up "
"being named \"YourCode.so\" or \"YourCode.dll\" or \"YourCode.dylib\" as "
"shown in the compiler examples above, then the correct entry point name "
"would be \"sqlite3_yourcode_init\"."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:328
msgid ""
"Here is a complete template extension that you can copy/paste to get "
"started:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/loadext.html:331
#, no-wrap
msgid ""
"/* Add your header comment here */\n"
"#include &lt;sqlite3ext.h&gt; /* Do not use &lt;sqlite3.h&gt;! */\n"
"SQLITE_EXTENSION_INIT1\n"
"\n"
"/* Insert your extension code here */\n"
"\n"
"#ifdef _WIN32\n"
"__declspec(dllexport)\n"
"#endif\n"
"/* TODO: Change the entry point name so that \"extension\" is replaced by\n"
"** text derived from the shared library filename as follows:  Copy every\n"
"** ASCII alphabetic character from the filename after the last \"/\" "
"through\n"
"** the next following \".\", converting each character to lowercase, and\n"
"** discarding the first three characters if they are \"lib\".\n"
"*/\n"
"int sqlite3_extension_init(\n"
"  sqlite3 *db, \n"
"  char **pzErrMsg, \n"
"  const sqlite3_api_routines *pApi\n"
"){\n"
"  int rc = SQLITE_OK;\n"
"  SQLITE_EXTENSION_INIT2(pApi);\n"
"  /* Insert here calls to\n"
"  **     sqlite3_create_function_v2(),\n"
"  **     sqlite3_create_collation_v2(),\n"
"  **     sqlite3_create_module_v2(), and/or\n"
"  **     sqlite3_vfs_register()\n"
"  ** to register the new features that your extension adds.\n"
"  */\n"
"  return rc;\n"
"}\n"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/loadext.html:364
msgid "<span>4.1. </span>Example Extensions"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/loadext.html:366
msgid ""
"Many examples of complete and working loadable extensions can be seen in the "
"SQLite source tree in the <a "
"href=\"https://www.sqlite.org/src/file/ext/misc\">ext/misc</a> "
"subdirectory.  Each file in that directory is a separate extension.  "
"Documentation is provided by a header comment on the file.  Here are brief "
"notes on a few of the extensions in the <a "
"href=\"https://www.sqlite.org/src/file/ext/misc\">ext/misc</a> subdirectory:"
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:376
msgid ""
"<a href=\"https://www.sqlite.org/src/file/ext/misc/carray.c\">carray.c</a> "
"&mdash; Implementation of the <a href=\"carray.html\">carray table-valued "
"function</a>."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:379
msgid ""
"<a "
"href=\"https://www.sqlite.org/src/file/ext/misc/compress.c\">compress.c</a> "
"&mdash; Implementation of <a href=\"appfunc.html\">application-defined SQL "
"functions</a> compress() and uncompress() that do zLib compression of text "
"or blob content."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:383
msgid ""
"<a href=\"https://www.sqlite.org/src/file/ext/misc/json1.c\">json1.c</a> "
"&mdash; Implementation of <a href=\"json1.html\">JSON SQL functions</a> and "
"<a href=\"vtab.html#tabfunc2\">table-valued functions</a>.  This is a larger "
"and more complex extension."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:387
msgid ""
"<a href=\"https://www.sqlite.org/src/file/ext/misc/memvfs.c\">memvfs.c</a> "
"&mdash; Implementation of a new <a href=\"vfs.html\">VFS</a> that stores all "
"content in-memory."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:390
msgid ""
"<a href=\"https://www.sqlite.org/src/file/ext/misc/rot13.c\">rot13.c</a> "
"&mdash; Implementation of a <a "
"href=\"https://en.wikipedia.org/wiki/ROT13\">rot13()</a> SQL function.  This "
"is a very simple example of an extension function and is useful as a "
"template for creating new extensions."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/loadext.html:395
msgid ""
"<a href=\"https://www.sqlite.org/src/file/ext/misc/series.c\">series.c</a> "
"&mdash; Implementation of the generate_series <a href=\"vtab.html\">virtual "
"table</a> and <a href=\"vtab.html#tabfunc2\">table-valued function</a>.  "
"This is a relatively simple example of a virtual table implementation which "
"can serve as a template for writing new virtual tables."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:402
msgid ""
"Other and more complex extensions can be found in subfolders under <a "
"href=\"https://www.sqlite.org/src/file/ext\">ext/</a> other than ext/misc/.  "
"<a name=\"persist\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><h1>
#: sedout/loadext.html:407
msgid "<span>5. </span>Persistent Loadable Extensions"
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:409
msgid ""
"The default behavior for a loadable extension is that it is unloaded from "
"process memory when the database connection that originally invoked <a "
"href=\"c3ref/load_extension.html\">sqlite3_load_extension()</a> closes.  (In "
"other words, the xDlClose method of the <a "
"href=\"c3ref/vfs.html\">sqlite3_vfs</a> object is called for all extensions "
"when a database connection closes.)  However, if the initialization "
"procedure returns <a "
"href=\"rescode.html#ok_load_permanently\">SQLITE_OK_LOAD_PERMANENTLY</a> "
"instead of SQLITE_OK, then the extension will not be unloaded (xDlClose will "
"not be invoked) and the extension will remain in process memory "
"indefinitely.  The SQLITE_OK_LOAD_PERMANENTLY return value is useful for "
"extensions that want to register new <a href=\"vfs.html\">VFSes</a>."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:419
msgid ""
"To clarify: an extension for which the initialization function returns "
"SQLITE_OK_LOAD_PERMANENTLY continues to exist in memory after the database "
"connection closes.  However, the extension is <em>not</em> automatically "
"registered with subsequent database connections.  This makes it possible to "
"load extensions that implement new <a href=\"vfs.html\">VFSes</a>.  To "
"persistently load and register an extension that implements new SQL "
"functions, collating sequences, and/or virtual tables, such that those added "
"capabilities are available to all subsequent database connections, then the "
"initialization routine should also invoke <a "
"href=\"c3ref/auto_extension.html\">sqlite3_auto_extension()</a> on a "
"subfunction that will register those services."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:430
msgid ""
"The <a href=\"https://sqlite.org/src/file/ext/misc/vfsstat.c\">vfsstat.c</a> "
"extension show an example of a loadable extension that persistently "
"registers both a new VFS and a new virtual table.  The <a "
"href=\"https://sqlite.org/src/info/77b5b4235c9f7f11?ln=801-819\">sqlite3_vfsstat_init()</a> "
"initialization routine in that extension is called only once, when the "
"extension is first loaded.  It registers the new \"vfslog\" VFS just that "
"one time, and it returns SQLITE_OK_LOAD_PERMANENTLY so that the code used to "
"implement the \"vfslog\" VFS will remain in memory. The initialization "
"routine also invokes <a "
"href=\"c3ref/auto_extension.html\">sqlite3_auto_extension()</a> on a pointer "
"to the \"vstatRegister()\" function so that all subsequent database "
"connections will invoke the \"vstatRegister()\" function as they start up, "
"and hence register the \"vfsstat\" virtual table."
msgstr ""

#. type: Content of: <html><body><div><p><h1>
#: sedout/loadext.html:443
msgid "<span>6. </span>Statically Linking A Run-Time Loadable Extension"
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:445
msgid ""
"The exact same source code can be used for both a run-time loadable shared "
"library or DLL and as a module that is statically linked with your "
"application.  This provides flexibility and allows you to reuse the same "
"code in different ways."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:450
msgid ""
"To statically link your extension, simply add the -DSQLITE_CORE compile-time "
"option.  The SQLITE_CORE macro causes the SQLITE_EXTENSION_INIT1 and "
"SQLITE_EXTENSION_INIT2 macros to become no-ops.  Then modify your "
"application to invoke the entry point directly, passing in a NULL pointer as "
"the third \"pApi\" parameter."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:456
msgid ""
"It is particularly important to use an entry point name that is based on the "
"extension filename, rather than the generic \"sqlite3_extension_init\" entry "
"point name, if you will be statically linking two or more extensions.  If "
"you use the generic name, there will be multiple definitions of the same "
"symbol and the link will fail."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:462
msgid ""
"If you will be opening multiple database connections in your application, "
"rather than invoking the extension entry points for each database connection "
"separately, you might want to consider using the <a "
"href=\"c3ref/auto_extension.html\">sqlite3_auto_extension()</a> interface to "
"register your extensions and to cause them to be automatically started as "
"each database connection is opened.  You only have to register each "
"extension once, and you can do so near the beginning of your main() "
"routine.  Using the <a "
"href=\"c3ref/auto_extension.html\">sqlite3_auto_extension()</a> interface to "
"register your extensions makes your extensions work as if they were built "
"into the core SQLite - they automatically exist whenever you open a new "
"database connection without needing to be initialized.  Just be sure to "
"complete any configuration you need to accomplish using <a "
"href=\"c3ref/config.html\">sqlite3_config()</a> before registering your "
"extensions, since the <a "
"href=\"c3ref/auto_extension.html\">sqlite3_auto_extension()</a> interface "
"implicitly calls <a href=\"c3ref/initialize.html\">sqlite3_initialize()</a>."
msgstr ""

#. type: Content of: <html><body><div><p><h1>
#: sedout/loadext.html:477
msgid "<span>7. </span>Implementation Details"
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:479
msgid ""
"SQLite implements run-time extension loading using the xDlOpen(), "
"xDlError(), xDlSym(), and xDlClose() methods of the <a "
"href=\"c3ref/vfs.html\">sqlite3_vfs</a> object.  These methods are "
"implemented using the dlopen() library on unix (which explains why SQLite "
"commonly needs to be linked against the \"-ldl\" library on unix systems)  "
"and using LoadLibrary() API on Windows.  In a custom <a "
"href=\"vfs.html\">VFS</a> for unusual systems, these methods can all be "
"omitted, in which case the run-time extension loading mechanism will not "
"work (though you will still be able to statically link the extension code, "
"assuming the entry pointers are uniquely named).  SQLite can be compiled "
"with <a "
"href=\"compile.html#omit_load_extension\">SQLITE_OMIT_LOAD_EXTENSION</a> to "
"omit the extension loading code from the build."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/loadext.html:492
msgid ""
"<small><i>This page last modified on <a "
"href=\"https://sqlite.org/docsrc/honeypot\" id=\"mtimelink\" "
"data-href=\"https://sqlite.org/docsrc/finfo/pages/loadext.in?m=b7044b2344\">2022-04-18 "
"02:55:50</a> UTC </i></small>"
msgstr ""
