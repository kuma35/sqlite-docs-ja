# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-15 23:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><body><div><div><div>
#: sedout/json1.html:6 sedout/json1.html:121
msgid "JSON Functions And Operators"
msgstr ""

#. type: Content of: <html><body><div><a>
#: sedout/json1.html:11
msgid "<a href=\"index.html\">"
msgstr ""

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/json1.html:12
msgid "SQLite"
msgstr ""

#. type: Content of: <html><body><div><div>
#: sedout/json1.html:16
msgid "Small. Fast. Reliable."
msgstr ""

#. type: Content of: <html><body><div><div><br>
#: sedout/json1.html:16
msgid "Choose any three."
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/json1.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/json1.html:21
msgid "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/json1.html:22 sedout/json1.html:34
msgid "<a href='about.html'>About</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/json1.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/json1.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/json1.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/json1.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/json1.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/json1.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/json1.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/json1.html:36
msgid "<a href='download.html'>Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/json1.html:37
msgid "<a href='support.html'>Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/json1.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><form><select>
#: sedout/json1.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/json1.html:44
msgid "Search Documentation"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/json1.html:45
msgid "Search Changelog"
msgstr ""

#. type: Content of: <html><body><div><div><form>
#: sedout/json1.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr ""

#. type: Content of: <html><body><script>
#: sedout/json1.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( "
"w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ "
"w.style.display = \"block\"; } } function toggle_search() { var w = "
"document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ "
"w.style.display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function "
"div_off(nm){document.getElementById(nm).style.display=\"none\";} "
"window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the "
"Search feature if we are not operating from CGI, since */ /* Search is "
"accomplished using CGI and will not work without it. */ if( !location.origin "
"|| !location.origin.match || !location.origin.match(/http/) ){ "
"document.getElementById(\"search_menubutton\").style.display = \"none\"; } "
"/* Used by the Hide/Show button beside syntax diagrams, to toggle the */ "
"function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = "
"document.getElementById(btn); if( x.style.display!='none' ){ x.style.display "
"= 'none'; b.innerHTML='show'; }else{ x.style.display = ''; "
"b.innerHTML='hide'; } return false; } var antiRobot = 0; function "
"antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = "
"document.getElementById(\"mtimelink\"); if(j && "
"j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } "
"function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot "
"|= 2; antiRobotGo(); document.body.onmousedown=null; } "
"document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); "
"document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; "
"antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"
msgstr ""

#. type: Content of: <html><body><div><div><div>
#: sedout/json1.html:124
msgid ""
"<a onclick=\"toggle_toc()\"> <span class=\"fancy_toc_mark\" "
"id=\"toc_mk\">&#x25ba;</span> Table Of Contents </a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:128
msgid "<a href=\"#overview\">1. Overview</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:129
msgid "<a href=\"#compiling_in_json_support\">2. Compiling in JSON Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:130
msgid "<a href=\"#interface_overview\">3. Interface Overview</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:131
msgid "<a href=\"#json_arguments\">3.1. JSON arguments</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:132
msgid "<a href=\"#path_arguments\">3.2. PATH arguments</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:133
msgid "<a href=\"#value_arguments\">3.3. VALUE arguments</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:134
msgid "<a href=\"#compatibility\">3.4. Compatibility</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:135
msgid "<a href=\"#function_details\">4. Function Details</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:136
msgid "<a href=\"#the_json_function\">4.1. The json() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:137
msgid "<a href=\"#the_json_array_function\">4.2. The json_array() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:138
msgid ""
"<a href=\"#the_json_array_length_function\">4.3. The json_array_length() "
"function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:139
msgid "<a href=\"#the_json_extract_function\">4.4. The json_extract() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:140
msgid "<a href=\"#the_and_operators\">4.5. The -> and -&gt;&gt; operators</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:141
msgid ""
"<a href=\"#the_json_insert_json_replace_and_json_set_functions\">4.6. The "
"json_insert(), json_replace, and json_set() functions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:142
msgid "<a href=\"#the_json_object_function\">4.7. The json_object() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:143
msgid "<a href=\"#the_json_patch_function\">4.8. The json_patch() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:144
msgid "<a href=\"#the_json_remove_function\">4.9. The json_remove() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:145
msgid "<a href=\"#the_json_type_function\">4.10. The json_type() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:146
msgid "<a href=\"#the_json_valid_function\">4.11. The json_valid() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:147
msgid "<a href=\"#the_json_quote_function\">4.12. The json_quote() function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:148
msgid ""
"<a "
"href=\"#the_json_group_array_and_json_group_object_aggregate_sql_functions\">4.13. "
"The json_group_array() and json_group_object()  aggregate SQL functions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:150
msgid ""
"<a href=\"#the_json_each_and_json_tree_table_valued_functions\">4.14. The "
"json_each() and json_tree() table-valued functions</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/json1.html:151
msgid ""
"<a href=\"#examples_using_json_each_and_json_tree_\">4.14.1. Examples using "
"json_each() and json_tree()</a>"
msgstr ""

#. type: Content of: <html><body><div><div><script>
#: sedout/json1.html:155
msgid ""
"function toggle_toc(){ var sub = document.getElementById(\"toc_sub\")  var "
"mk = document.getElementById(\"toc_mk\")  if( sub.style.display!=\"block\" "
"){ sub.style.display = \"block\"; mk.innerHTML = \"&#x25bc;\"; } else { "
"sub.style.display = \"none\"; mk.innerHTML = \"&#x25ba;\"; } }"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/json1.html:173
msgid "<span>1. </span>Overview"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/json1.html:175
msgid ""
"By default, SQLite supports fifteen functions and two operators for dealing "
"with JSON values.  There are also two <a "
"href=\"vtab.html#tabfunc2\">table-valued functions</a> that can be used to "
"decompose a JSON string."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/json1.html:180
msgid "There are 15 scalar functions and operators:"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:184
msgid "<a href='#jmini'>json</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:188
msgid "<a href='#jarray'>json_array</a>(<i>value1</i>,<i>value2</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:192
msgid "<a href='#jarraylen'>json_array_length</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><br>
#: sedout/json1.html:192
msgid "<a href='#jarraylen'>json_array_length</a>(<i>json</i>,<i>path</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:196
msgid "<a href='#jex'>json_extract</a>(<i>json</i>,<i>path</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:200
msgid "<i>json</i> <a href='#jptr'>-></a> <i>path</i>"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:204
msgid "<i>json</i> <a href='#jptr'>-&gt;&gt;</a> <i>path</i>"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:208
msgid "<a href='#jins'>json_insert</a>(<i>json</i>,<i>path</i>,<i>value</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:212
msgid "<a href='#jobj'>json_object</a>(<i>label1</i>,<i>value1</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:216
msgid "<a href='#jpatch'>json_patch</a>(<i>json</i>1,json2)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:220
msgid "<a href='#jrm'>json_remove</a>(<i>json</i>,<i>path</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:224
msgid "<a href='#jrepl'>json_replace</a>(<i>json</i>,<i>path</i>,<i>value</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:228
msgid "<a href='#jset'>json_set</a>(<i>json</i>,<i>path</i>,<i>value</i>,...)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:232
msgid "<a href='#jtype'>json_type</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><br>
#: sedout/json1.html:232
msgid "<a href='#jtype'>json_type</a>(<i>json</i>,<i>path</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:236
msgid "<a href='#jvalid'>json_valid</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/json1.html:240
msgid "<a href='#jquote'>json_quote</a>(<i>value</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/json1.html:246
msgid "There are two aggregate SQL functions:"
msgstr ""

#. type: Content of: <html><body><div><p><p><ol><li>
#: sedout/json1.html:250
msgid "<a href='#jgrouparray'>json_group_array</a>(<i>value</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><ol><li>
#: sedout/json1.html:254
msgid "<a href='#jgroupobject'>json_group_object</a>(name,<i>value</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/json1.html:260
msgid "The two <a href=\"vtab.html#tabfunc2\">table-valued functions</a> are:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><ol><li>
#: sedout/json1.html:264
msgid "<a href='#jeach'>json_each</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><ol><li><br>
#: sedout/json1.html:264
msgid "<a href='#jeach'>json_each</a>(<i>json</i>,<i>path</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><ol><li>
#: sedout/json1.html:268
msgid "<a href='#jtree'>json_tree</a>(<i>json</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><ol><li><br>
#: sedout/json1.html:268
msgid "<a href='#jtree'>json_tree</a>(<i>json</i>,<i>path</i>)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><style>
#: sedout/json1.html:277
msgid ".jans {color: #050;} .jex {color: #025;}"
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/json1.html:282
msgid "<a name=\"howtocompile\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h1>
#: sedout/json1.html:284
msgid "<span>2. </span>Compiling in JSON Support"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:287
msgid ""
"The JSON functions and operators are built into SQLite by default, as of "
"SQLite version 3.38.0 (2022-02-22).  They can be omitted by adding the "
"-DSQLITE_OMIT_JSON compile-time option.  Prior to version 3.38.0, the JSON "
"functions were an extension that would only be included in builds if the "
"-DSQLITE_ENABLE_JSON1 compile-time option was included.  In other words, the "
"JSON functions went from being opt-in with SQLite version 3.37.2 and earlier "
"to opt-out with SQLite version 3.38.0 and later."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h1>
#: sedout/json1.html:296
msgid "<span>3. </span>Interface Overview"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:299
msgid ""
"SQLite stores JSON as ordinary text.  Backwards compatibility constraints "
"mean that SQLite is only able to store values that are NULL, integers, "
"floating-point numbers, text, and BLOBs.  It is not possible to add a sixth "
"\"JSON\" type."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:305
msgid ""
"SQLite does not (currently) support a binary encoding of JSON.  Experiments "
"have been unable to find a binary encoding that is significantly smaller or "
"faster than a plain text encoding.  (The present implementation parses JSON "
"text at over 1 GB/s.)  All JSON functions currently throw an error if any of "
"their arguments are BLOBs because BLOBs are reserved for a future "
"enhancement in which BLOBs will store the binary encoding for JSON."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:314
msgid "<span>3.1. </span>JSON arguments"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:317
msgid ""
"For functions that accept JSON as their first argument, that argument can be "
"a JSON object, array, number, string, or null.  SQLite numeric values and "
"NULL values are interpreted as JSON numbers and nulls, respectively.  SQLite "
"text values can be understood as JSON objects, arrays, or strings.  If an "
"SQLite text value that is not a well-formed JSON object, array, or string is "
"passed into JSON function, that function will usually throw an error.  "
"(Exceptions to this rule are <a href=\"json1.html#jvalid\">json_valid()</a> "
"and <a href=\"json1.html#jquote\">json_quote()</a>.)"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:327
msgid ""
"For the purposes of determining validity, leading and trailing whitespace on "
"JSON inputs is ignored.  Interior whitespace is also ignored, in accordance "
"with the JSON spec.  These routines accept exactly the <a "
"href=\"http://www.rfc-editor.org/rfc/rfc7159.txt\">rfc-7159 JSON syntax</a> "
"&mdash; no more and no less.  <a name=\"jsonpath\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:335
msgid "<span>3.2. </span>PATH arguments"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:338
msgid ""
"For functions that accept PATH arguments, that PATH must be well-formed or "
"else the function will throw an error.  A well-formed PATH is a text value "
"that begins with exactly one '$' character followed by zero or more "
"instances of \".<i>objectlabel</i>\" or \"&#91;<i>arrayindex</i>&#93;\"."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:345
msgid ""
"The <i>arrayindex</i> is usually a non-negative integer <i>N</i>.  In that "
"case, the array element selected is the <i>N</i>-th element of the array, "
"starting with zero on the left.  The <i>arrayindex</i> can also be of the "
"form \"<b>#-</b><i>N</i>\" in which case the element selected is the "
"<i>N</i>-th from the right.  The last element of the array is "
"\"<b>#-1</b>\".  Think of the \"#\" characters as the \"number of elements "
"in the array\".  Then the expression \"#-1\" evaluates to the integer that "
"corresponds to the last entry in the array.  It is sometimes useful for the "
"array index to be just the <b>#</b> character, for example when appending a "
"value to an existing JSON array:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:358
msgid ""
"<span class='jex'>json_set('[0,1,2]','$[#]','new')</span> <span "
"class='jans'>&rarr; '[0,1,2,\"new\"]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:364
msgid "<a name=\"varg\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:366
msgid "<span>3.3. </span>VALUE arguments"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:369
msgid ""
"For functions that accept \"<i>value</i>\" arguments (also shown as "
"\"<i>value1</i>\" and \"<i>value2</i>\"), those arguments are usually "
"understood to be literal strings that are quoted and become JSON string "
"values in the result.  Even if the input <i>value</i> strings look like "
"well-formed JSON, they are still interpreted as literal strings in the "
"result."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:378
msgid ""
"However, if a <i>value</i> argument comes directly from the result of "
"another JSON function or from <a href=\"json1.html#jptr\">the -> "
"operator</a> (but not <a href=\"json1.html#jptr\">the -&gt;&gt; "
"operator</a>), then the argument is understood to be actual JSON and the "
"complete JSON is inserted rather than a quoted string."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:384
msgid ""
"For example, in the following call to json_object(), the <i>value</i> "
"argument looks like a well-formed JSON array.  However, because it is just "
"ordinary SQL text, it is interpreted as a literal string and added to the "
"result as a quoted string:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:390
msgid ""
"<span class='jex'>json_object('ex','[52,3.14159]')</span> <span "
"class='jans'>&rarr; '{\"ex\":\"[52,3.14159]\"}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:393
msgid ""
"<span class='jex'>json_object('ex',('52,3.14159]'-&gt;&gt;'$'))</span> <span "
"class='jans'>&rarr; '{\"ex\":\"[52,3.14159]\"}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:400
msgid ""
"But if the <i>value</i> argument in the outer json_object() call is the "
"result of another JSON function like <a href=\"json1.html#jmini\">json()</a> "
"or <a href=\"json1.html#jarray\">json_array()</a>, then the value is "
"understood to be actual JSON and is inserted as such:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:405
msgid ""
"<span class='jex'>json_object('ex',json('[52,3.14159]'))</span> <span "
"class='jans'>&rarr; '{\"ex\":[52,3.14159]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:408
msgid ""
"<span class='jex'>json_object('ex',json_array(52,3.14159))</span> <span "
"class='jans'>&rarr; '{\"ex\":[52,3.14159]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:411
msgid ""
"<span class='jex'>json_object('ex','[52,3.14159]'->'$')</span> <span "
"class='jans'>&rarr; '{\"ex\":[52,3.14159]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:418
msgid ""
"To be clear: \"<i>json</i>\" arguments are always interpreted as JSON "
"regardless of where the value for that argument comes from.  But "
"\"<i>value</i>\" arguments are only interpreted as JSON if those arguments "
"come directly from another JSON function or <a href=\"json1.html#jptr\">the "
"-> operator</a>."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:423
msgid "<span>3.4. </span>Compatibility"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:426
msgid ""
"The current implementation of this JSON library uses a recursive descent "
"parser.  In order to avoid using excess stack space, any JSON input that has "
"more than 2000 levels of nesting is considered invalid.  Limits on nesting "
"depth are allowed for compatible implementations of JSON by <a "
"href=\"https://tools.ietf.org/html/rfc7159#section-9\">RFC-7159 section "
"9</a>."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h1>
#: sedout/json1.html:433
msgid "<span>4. </span>Function Details"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:435
msgid ""
"The following sections provide additional detail on the operation of the "
"various JSON functions and operators: <a name=\"jmini\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:440
msgid "<span>4.1. </span>The json() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:442
msgid ""
"The json(X) function verifies that its argument X is a valid JSON string and "
"returns a minified version of that JSON string (with all unnecessary "
"whitespace removed).  If X is not a well-formed JSON string, then this "
"routine throws an error."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:447
msgid ""
"In other words, this function converts raw text that looks like JSON into "
"actual JSON so that it may be passed into the <a "
"href=\"json1.html#varg\">value argument</a> of some other json function and "
"will be interpreted as JSON rather than a string.  This function is not "
"appropriate for testing whether or not a particular string is well-formed "
"JSON - use the <a href=\"json1.html#jvalid\">json_valid()</a> routine below "
"for that task."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:454
msgid ""
"If the argument X to json(X) contains JSON objects with duplicate labels, "
"then it is undefined whether or not the duplicates are preserved.  The "
"current implementation preserves duplicates.  However, future enhancements "
"to this routine may choose to silently remove duplicates."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:461
msgid "Example:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:464
msgid ""
"<span class='jex'>json(' { \"this\" : \"is\", \"a\": [ \"test\" ] } "
"')</span> <span class='jans'>&rarr; "
"'{\"this\":\"is\",\"a\":[\"test\"]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:470
msgid "<a name=\"jarray\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:472
msgid "<span>4.2. </span>The json_array() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:474
msgid ""
"The json_array() SQL function accepts zero or more arguments and returns a "
"well-formed JSON array that is composed from those arguments.  If any "
"argument to json_array() is a BLOB then an error is thrown."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:478
msgid ""
"An argument with SQL type TEXT is normally converted into a quoted JSON "
"string.  However, if the argument is the output from another json1 function, "
"then it is stored as JSON.  This allows calls to json_array()  and <a "
"href=\"json1.html#jobj\">json_object()</a> to be nested.  The <a "
"href=\"json1.html#jmini\">json()</a> function can also be used to force "
"strings to be recognized as JSON."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:484 sedout/json1.html:518 sedout/json1.html:558
#: sedout/json1.html:649 sedout/json1.html:812 sedout/json1.html:844
#: sedout/json1.html:887 sedout/json1.html:932 sedout/json1.html:975
#: sedout/json1.html:995
msgid "Examples:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:487
msgid ""
"<span class='jex'>json_array(1,2,'3',4)</span> <span class='jans'>&rarr; "
"'[1,2,\"3\",4]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:490
msgid ""
"<span class='jex'>json_array('[1,2]')</span> <span class='jans'>&rarr; "
"'[\"[1,2]\"]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:493
msgid ""
"<span class='jex'>json_array(json_array(1,2))</span> <span "
"class='jans'>&rarr; '[[1,2]]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:496
msgid ""
"<span class='jex'>json_array(1,null,'3','[4,5]','{\"six\":7.7}')</span> "
"<span class='jans'>&rarr; "
"'[1,null,\"3\",\"[4,5]\",\"{\\\"six\\\":7.7}\"]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:499
msgid ""
"<span "
"class='jex'>json_array(1,null,'3',json('[4,5]'),json('{\"six\":7.7}'))</span> "
"<span class='jans'>&rarr; '[1,null,\"3\",[4,5],{\"six\":7.7}]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:506
msgid "<a name=\"jarraylen\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:508
msgid "<span>4.3. </span>The json_array_length() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:510
msgid ""
"The json_array_length(X) function returns the number of elements in the JSON "
"array X, or 0 if X is some kind of JSON value other than an array.  The "
"json_array_length(X,P) locates the array at path P within X and returns the "
"length of that array, or 0 if path P locates an element in X that is not a "
"JSON array, and NULL if path P does not locate any element of X.  Errors are "
"thrown if either X is not well-formed JSON or if P is not a well-formed "
"path."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:521
msgid ""
"<span class='jex'>json_array_length('[1,2,3,4]')</span> <span "
"class='jans'>&rarr; 4</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:524
msgid ""
"<span class='jex'>json_array_length('[1,2,3,4]', '$')</span> <span "
"class='jans'>&rarr; 4</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:527
msgid ""
"<span class='jex'>json_array_length('[1,2,3,4]', '$[2]')</span> <span "
"class='jans'>&rarr; 0</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:530
msgid ""
"<span class='jex'>json_array_length('{\"one\":[1,2,3]}')</span> <span "
"class='jans'>&rarr; 0</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:533
msgid ""
"<span class='jex'>json_array_length('{\"one\":[1,2,3]}', '$.one')</span> "
"<span class='jans'>&rarr; 3</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:536
msgid ""
"<span class='jex'>json_array_length('{\"one\":[1,2,3]}', '$.two')</span> "
"<span class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:543
msgid "<a name=\"jex\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:545
msgid "<span>4.4. </span>The json_extract() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:547
msgid ""
"The json_extract(X,P1,P2,...) extracts and returns one or more values from "
"the well-formed JSON at X.  If only a single path P1 is provided, then the "
"SQL datatype of the result is NULL for a JSON null, INTEGER or REAL for a "
"JSON numeric value, an INTEGER zero for a JSON false value, an INTEGER one "
"for a JSON true value, the dequoted text for a JSON string value, and a text "
"representation for JSON object and array values.  If there are multiple path "
"arguments (P1, P2, and so forth) then this routine returns SQLite text which "
"is a well-formed JSON array holding the various values."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:561
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', "
"'$')</span> <span class='jans'>&rarr; "
"'{\"a\":2,\"c\":[4,5,{\"f\":7}]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:564
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', "
"'$.c')</span> <span class='jans'>&rarr; '[4,5,{\"f\":7}]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:567
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', "
"'$.c[2]')</span> <span class='jans'>&rarr; '{\"f\":7}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:570
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', "
"'$.c[2].f')</span> <span class='jans'>&rarr; 7</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:573
msgid ""
"<span "
"class='jex'>json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c','$.a')</span> "
"<span class='jans'>&rarr; '[[4,5],2]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:576
msgid ""
"<span "
"class='jex'>json_extract('{\"a\":2,\"c\":[4,5],\"f\":7}','$.c[#-1]')</span> "
"<span class='jans'>&rarr; 5</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:579
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', "
"'$.x')</span> <span class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:582
msgid ""
"<span class='jex'>json_extract('{\"a\":2,\"c\":[4,5,{\"f\":7}]}', '$.x', "
"'$.a')</span> <span class='jans'>&rarr; '[null,2]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:585
msgid ""
"<span class='jex'>json_extract('{\"a\":\"xyz\"}', '$.a')</span> <span "
"class='jans'>&rarr; 'xyz'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:588
msgid ""
"<span class='jex'>json_extract('{\"a\":null}', '$.a')</span> <span "
"class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:594
msgid ""
"There is a subtle incompatibility between the json_extract() function in "
"SQLite and the json_extract() function in MySQL.  The MySQL version of "
"json_extract() always returns JSON.  The SQLite version of json_extract() "
"only returns JSON if there are two or more PATH arguments (because the "
"result is then a JSON array) or if the single PATH argument references an "
"array or object.  In SQLite, if json_extract() has only a single PATH "
"argument and that PATH references a JSON null or a string or a numeric "
"value, then json_extract() returns the corresponding SQL NULL, TEXT, "
"INTEGER, or REAL value."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:604
msgid ""
"The difference between MySQL json_extract() and SQLite json_extract()  "
"really only stands out when accessing individual values within the JSON that "
"are strings or NULLs.  The following table demonstrates the difference:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:610
msgid "Operation"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:610
msgid "SQLite Result"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:610
msgid "MySQL Result"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:611
msgid "json_extract('{\"a\":null,\"b\":\"xyz\"}','$.a')"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:611
msgid "NULL"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:611
msgid "'null'"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:612
msgid "json_extract('{\"a\":null,\"b\":\"xyz\"}','$.b')"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:612
msgid "'xyz'"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:612
msgid "'\"xyz\"'"
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/json1.html:615
msgid "<a name=\"jptr\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:617
msgid "<span>4.5. </span>The -> and -&gt;&gt; operators"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:619
msgid ""
"Beginning with SQLite version 3.38.0 (2022-02-22), the -> and -&gt;&gt; "
"operators are available for extracting subcomponents of JSON.  The SQLite "
"implementation of -> and -&gt;&gt; strives to be compatible with both MySQL "
"and PostgreSQL.  The -> and -&gt;&gt; operators take a JSON string as their "
"left operand and a PATH expression or object field label or array index as "
"their right operand.  The -> operator returns a JSON representation of the "
"selected subcomponent or NULL if that subcomponent does not exist.  The "
"-&gt;&gt; operator returns an SQL TEXT, INTEGER, REAL, or NULL value that "
"represents the selected subcomponent, or NULL if the subcomponent does not "
"exist."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:631
msgid ""
"Both the -> and -&gt;&gt; operators select the same subcomponent of the JSON "
"to their left.  The difference is that -> always returns a JSON "
"representation of that subcomponent and the -&gt;&gt; operator always "
"returns an SQL representation of that subcomponent.  Thus, these operators "
"are subtly different from a two-argument <a "
"href=\"json1.html#jex\">json_extract()</a> function call.  A call to "
"json_extract() with two arguments will return a JSON representation of the "
"subcomponent if and only if the subcomponent is a JSON array or object, and "
"will return an SQL representation of the subcomponent if the subcomponent is "
"a JSON null, string, or numeric value."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:641
msgid ""
"The right-hand operand to the -> and -&gt;&gt; operators can be a "
"well-formed JSON path expression.  This is the form used by MySQL.  For "
"compatibility with PostgreSQL, the -> and -&gt;&gt; operators also accept a "
"text label or integer as their right-hand operand.  If the right operand is "
"a text label X, then it is interpreted as the JSON path '$.X'.  If the right "
"operand is an integer value N, then it is interpreted as the JSON path "
"'$[N]'."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:652
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$'</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":[4,5,{\"f\":7}]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:655
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c'</span> <span "
"class='jans'>&rarr; '[4,5,{\"f\":7}]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:658
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> 'c'</span> <span "
"class='jans'>&rarr; '[4,5,{\"f\":7}]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:661
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2]'</span> <span "
"class='jans'>&rarr; '{\"f\":7}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:664
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.c[2].f'</span> "
"<span class='jans'>&rarr; '7'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:667
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5],\"f\":7}' -> '$.c[#-1]'</span> <span "
"class='jans'>&rarr; '5'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:670
msgid ""
"<span class='jex'>'{\"a\":2,\"c\":[4,5,{\"f\":7}]}' -> '$.x'</span> <span "
"class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:673
msgid ""
"<span class='jex'>'[11,22,33,44]' -> 3</span> <span class='jans'>&rarr; "
"'44'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:676
msgid ""
"<span class='jex'>'[11,22,33,44]' -&gt;&gt; 3</span> <span "
"class='jans'>&rarr; 44</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:679
msgid ""
"<span class='jex'>'{\"a\":\"xyz\"}' -> '$.a'</span> <span "
"class='jans'>&rarr; '\"xyz\"'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:682
msgid ""
"<span class='jex'>'{\"a\":\"xyz\"}' -&gt;&gt; '$.a'</span> <span "
"class='jans'>&rarr; 'xyz'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:685
msgid ""
"<span class='jex'>'{\"a\":null}' -> '$.a'</span> <span class='jans'>&rarr; "
"'null'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:688
msgid ""
"<span class='jex'>'{\"a\":null}' -&gt;&gt; '$.a'</span> <span "
"class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:694
msgid "<a name=\"jins\"></a> <a name=\"jrepl\"></a> <a name=\"jset\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:700
msgid "<span>4.6. </span>The json_insert(), json_replace, and json_set() functions"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:702
msgid ""
"The json_insert(), json_replace, and json_set() functions all take a single "
"JSON value as their first argument followed by zero or more pairs of path "
"and value arguments, and return a new JSON string formed by updating the "
"input JSON by the path/value pairs.  The functions differ only in how they "
"deal with creating new values and overwriting preexisting values."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:712
msgid "Function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:712
msgid "Overwrite if already exists?"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><th>
#: sedout/json1.html:712
msgid "Create if does not exist?"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:714
msgid "json_insert()"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:714 sedout/json1.html:716
msgid "No"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:714 sedout/json1.html:716 sedout/json1.html:718
msgid "Yes"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:716
msgid "json_replace()"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><center><table><tr><td>
#: sedout/json1.html:718
msgid "json_set()"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:721
msgid ""
"The json_insert(), json_replace(), and json_set() functions always take an "
"odd number of arguments.  The first argument is always the original JSON to "
"be edited.  Subsequent arguments occur in pairs with the first element of "
"each pair being a path and the second element being the value to insert or "
"replace or set on that path."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:727
msgid ""
"Edits occur sequentially from left to right.  Changes caused by prior edits "
"can affect the path search for subsequent edits."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:730
msgid ""
"If the value of a path/value pair is an SQLite TEXT value, then it is "
"normally inserted as a quoted JSON string, even if the string looks like "
"valid JSON.  However, if the value is the result of another json function "
"(such as <a href=\"json1.html#jmini\">json()</a> or <a "
"href=\"json1.html#jarray\">json_array()</a> or <a "
"href=\"json1.html#jobj\">json_object()</a>)  or if it is the result of <a "
"href=\"json1.html#jptr\">the -> operator</a>, then it is interpreted as JSON "
"and is inserted as JSON retaining all of its substructure.  Values that are "
"the result of <a href=\"json1.html#jptr\">the -&gt;&gt; operator</a> are "
"always interpreted as TEXT and are inserted as a JSON string even if they "
"look like valid JSON."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:740
msgid ""
"These routines throw an error if the first JSON argument is not well-formed "
"or if any PATH argument is not well-formed or if any argument is a BLOB."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:744
msgid ""
"To append an element onto the end of an array, using json_insert()  with an "
"array index of \"#\".  Examples:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:748
msgid ""
"<span class='jex'>json_insert('[1,2,3,4]','$[#]',99)</span> <span "
"class='jans'>&rarr; '[1,2,3,4,99]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:751
msgid ""
"<span class='jex'>json_insert('[1,[2,3],4]','$[1][#]',99)</span> <span "
"class='jans'>&rarr; '[1,[2,3,99],4]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:757
msgid "Other examples:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:760
msgid ""
"<span class='jex'>json_insert('{\"a\":2,\"c\":4}', '$.a', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:763
msgid ""
"<span class='jex'>json_insert('{\"a\":2,\"c\":4}', '$.e', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":4,\"e\":99}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:766
msgid ""
"<span class='jex'>json_replace('{\"a\":2,\"c\":4}', '$.a', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":99,\"c\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:769
msgid ""
"<span class='jex'>json_replace('{\"a\":2,\"c\":4}', '$.e', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:772
msgid ""
"<span class='jex'>json_set('{\"a\":2,\"c\":4}', '$.a', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":99,\"c\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:775
msgid ""
"<span class='jex'>json_set('{\"a\":2,\"c\":4}', '$.e', 99)</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":4,\"e\":99}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:778
msgid ""
"<span class='jex'>json_set('{\"a\":2,\"c\":4}', '$.c', '[97,96]')</span> "
"<span class='jans'>&rarr; '{\"a\":2,\"c\":\"[97,96]\"}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:781
msgid ""
"<span class='jex'>json_set('{\"a\":2,\"c\":4}', '$.c', "
"json('[97,96]'))</span> <span class='jans'>&rarr; "
"'{\"a\":2,\"c\":[97,96]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:784
msgid ""
"<span class='jex'>json_set('{\"a\":2,\"c\":4}', '$.c', "
"json_array(97,96))</span> <span class='jans'>&rarr; "
"'{\"a\":2,\"c\":[97,96]}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:790
msgid "<a name=\"jobj\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:792
msgid "<span>4.7. </span>The json_object() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:794
msgid ""
"The json_object() SQL function accepts zero or more pairs of arguments and "
"returns a well-formed JSON object that is composed from those arguments.  "
"The first argument of each pair is the label and the second argument of each "
"pair is the value.  If any argument to json_object() is a BLOB then an error "
"is thrown."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:800
msgid ""
"The json_object() function currently allows duplicate labels without "
"complaint, though this might change in a future enhancement."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:803
msgid ""
"An argument with SQL type TEXT it is normally converted into a quoted JSON "
"string even if the input text is well-formed JSON.  However, if the argument "
"is the direct result from another JSON function or <a "
"href=\"json1.html#jptr\">the -> operator</a> (but not <a "
"href=\"json1.html#jptr\">the -&gt;&gt; operator</a>), then it is treated as "
"JSON and all of its JSON type information and substructure is preserved.  "
"This allows calls to json_object()  and <a "
"href=\"json1.html#jarray\">json_array()</a> to be nested.  The <a "
"href=\"json1.html#jmini\">json()</a> function can also be used to force "
"strings to be recognized as JSON."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:815
msgid ""
"<span class='jex'>json_object('a',2,'c',4)</span> <span class='jans'>&rarr; "
"'{\"a\":2,\"c\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:818
msgid ""
"<span class='jex'>json_object('a',2,'c','{e:5}')</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":\"{e:5}\"}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:821
msgid ""
"<span class='jex'>json_object('a',2,'c',json_object('e',5))</span> <span "
"class='jans'>&rarr; '{\"a\":2,\"c\":{\"e\":5}}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:827
msgid "<a name=\"jpatch\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:829
msgid "<span>4.8. </span>The json_patch() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:831
msgid ""
"The json_patch(T,P) SQL function runs the <a "
"href=\"https://tools.ietf.org/html/rfc7396\">RFC-7396</a> MergePatch "
"algorithm to apply patch P against input T.  The patched copy of T is "
"returned."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:835
msgid ""
"MergePatch can add, modify, or delete elements of a JSON Object, and so for "
"JSON Objects, the json_patch() routine is a generalized replacement for <a "
"href=\"json1.html#jset\">json_set()</a> and <a "
"href=\"json1.html#jrm\">json_remove()</a>.  However, MergePatch treats JSON "
"Array objects as atomic.  MergePatch cannot append to an Array nor modify "
"individual elements of an Array.  It can only insert, replace, or delete the "
"whole Array as a single unit.  Hence, json_patch()  is not as useful when "
"dealing with JSON that includes Arrays, especially Arrays with lots of "
"substructure."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:847
msgid ""
"<span class='jex'>json_patch('{\"a\":1,\"b\":2}','{\"c\":3,\"d\":4}')</span> "
"<span class='jans'>&rarr; '{\"a\":1,\"b\":2,\"c\":3,\"d\":4}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:850
msgid ""
"<span class='jex'>json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":9}')</span> "
"<span class='jans'>&rarr; '{\"a\":9,\"b\":2}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:853
msgid ""
"<span class='jex'>json_patch('{\"a\":[1,2],\"b\":2}','{\"a\":null}')</span> "
"<span class='jans'>&rarr; '{\"b\":2}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:856
msgid ""
"<span "
"class='jex'>json_patch('{\"a\":1,\"b\":2}','{\"a\":9,\"b\":null,\"c\":8}')</span> "
"<span class='jans'>&rarr; '{\"a\":9,\"c\":8}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:859
msgid ""
"<span "
"class='jex'>json_patch('{\"a\":{\"x\":1,\"y\":2},\"b\":3}','{\"a\":{\"y\":9},\"c\":8}')</span> "
"<span class='jans'>&rarr; '{\"a\":{\"x\":1,\"y\":9},\"b\":3,\"c\":8}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:865
msgid "<a name=\"jrm\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:867
msgid "<span>4.9. </span>The json_remove() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:869
msgid ""
"The json_remove(X,P,...) function takes a single JSON value as its first "
"argument followed by zero or more path arguments.  The json_remove(X,P,...) "
"function returns a copy of the X parameter with all the elements identified "
"by path arguments removed.  Paths that select elements not found in X are "
"silently ignored."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:876
msgid ""
"Removals occurs sequentially from left to right.  Changes caused by prior "
"removals can affect the path search for subsequent arguments."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:879
msgid ""
"If the json_remove(X) function is called with no path arguments, then it "
"returns the input X reformatted, with excess whitespace removed."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:883
msgid ""
"The json_remove() function throws an error if the first argument is not "
"well-formed JSON or if any later argument is not a well-formed path, or if "
"any argument is a BLOB."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:890
msgid ""
"<span class='jex'>json_remove('[0,1,2,3,4]','$[2]')</span> <span "
"class='jans'>&rarr; '[0,1,3,4]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:893
msgid ""
"<span class='jex'>json_remove('[0,1,2,3,4]','$[2]','$[0]')</span> <span "
"class='jans'>&rarr; '[1,3,4]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:896
msgid ""
"<span class='jex'>json_remove('[0,1,2,3,4]','$[0]','$[2]')</span> <span "
"class='jans'>&rarr; '[1,2,4]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:899
msgid ""
"<span class='jex'>json_remove('[0,1,2,3,4]','$[#-1]','$[0]')</span> <span "
"class='jans'>&rarr; '[1,2,3]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:902
msgid ""
"<span class='jex'>json_remove('{\"x\":25,\"y\":42}')</span> <span "
"class='jans'>&rarr; '{\"x\":25,\"y\":42}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:905
msgid ""
"<span class='jex'>json_remove('{\"x\":25,\"y\":42}','$.z')</span> <span "
"class='jans'>&rarr; '{\"x\":25,\"y\":42}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:908
msgid ""
"<span class='jex'>json_remove('{\"x\":25,\"y\":42}','$.y')</span> <span "
"class='jans'>&rarr; '{\"x\":25}'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:911
msgid ""
"<span class='jex'>json_remove('{\"x\":25,\"y\":42}','$')</span> <span "
"class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:917
msgid "<a name=\"jtype\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:919
msgid "<span>4.10. </span>The json_type() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:921
msgid ""
"The json_type(X) function returns the \"type\" of the outermost element of "
"X.  The json_type(X,P) function returns the \"type\" of the element in X "
"that is selected by path P.  The \"type\" returned by json_type() is one of "
"the following SQL text values: 'null', 'true', 'false', 'integer', 'real', "
"'text', 'array', or 'object'.  If the path P in json_type(X,P) selects an "
"element that does not exist in X, then this function returns NULL."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:929
msgid ""
"The json_type() function throws an error if any of its arguments is not "
"well-formed or is a BLOB."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:935
msgid ""
"<span class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}')</span> "
"<span class='jans'>&rarr; 'object'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:938
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$')</span> "
"<span class='jans'>&rarr; 'object'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:941
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a')</span> "
"<span class='jans'>&rarr; 'array'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:944
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[0]')</span> "
"<span class='jans'>&rarr; 'integer'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:947
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[1]')</span> "
"<span class='jans'>&rarr; 'real'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:950
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[2]')</span> "
"<span class='jans'>&rarr; 'true'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:953
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[3]')</span> "
"<span class='jans'>&rarr; 'false'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:956
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[4]')</span> "
"<span class='jans'>&rarr; 'null'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:959
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[5]')</span> "
"<span class='jans'>&rarr; 'text'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:962
msgid ""
"<span "
"class='jex'>json_type('{\"a\":[2,3.5,true,false,null,\"x\"]}','$.a[6]')</span> "
"<span class='jans'>&rarr; NULL</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:968
msgid "<a name=\"jvalid\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:970
msgid "<span>4.11. </span>The json_valid() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:972
msgid ""
"The json_valid(X) function return 1 if the argument X is well-formed JSON "
"and return 0 if the argument X is not well-formed JSON."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:978
msgid ""
"<span class='jex'>json_valid('{\"x\":35}')</span> <span class='jans'>&rarr; "
"1</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:981
msgid ""
"<span class='jex'>json_valid('{\"x\":35')</span> <span class='jans'>&rarr; "
"0</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:987
msgid "<a name=\"jquote\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:989
msgid "<span>4.12. </span>The json_quote() function"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:991
msgid ""
"The json_quote(X) function converts the SQL value X (a number or a string) "
"into its corresponding JSON representation.  If X is a JSON value returned "
"by another JSON function, then this function is a no-op."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:998
msgid ""
"<span class='jex'>json_quote(3.14159)</span> <span class='jans'>&rarr; "
"3.14159</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:1001
msgid ""
"<span class='jex'>json_quote('verdant')</span> <span class='jans'>&rarr; "
"'\"verdant\"'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:1004
msgid ""
"<span class='jex'>json_quote('[1]')</span> <span class='jans'>&rarr; "
"'\"[1]\"'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:1007
msgid ""
"<span class='jex'>json_quote(json('[1]'))</span> <span class='jans'>&rarr; "
"'[1]'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p><ul><li>
#: sedout/json1.html:1010
msgid ""
"<span class='jex'>json_quote('[1,')</span> <span class='jans'>&rarr; "
"'\"[1,\"'</span>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1016
msgid "<a name=\"jgrouparray\"></a> <a name=\"jgroupobject\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:1019
msgid ""
"<span>4.13. </span>The json_group_array() and json_group_object()  aggregate "
"SQL functions"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1022
msgid ""
"The json_group_array(X) function is an <a "
"href=\"lang_aggfunc.html\">aggregate SQL function</a> that returns a JSON "
"array comprised of all X values in the aggregation.  Similarly, the "
"json_group_object(NAME,VALUE) function returns a JSON object comprised of "
"all NAME/VALUE pairs in the aggregation.  <a name=\"jeach\"></a> <a "
"name=\"jtree\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h2>
#: sedout/json1.html:1033
msgid "<span>4.14. </span>The json_each() and json_tree() table-valued functions"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1035
msgid ""
"The json_each(X) and json_tree(X) <a "
"href=\"vtab.html#tabfunc2\">table-valued functions</a> walk the JSON value "
"provided as their first argument and return one row for each element.  The "
"json_each(X) function only walks the immediate children of the top-level "
"array or object, or just the top-level element itself if the top-level "
"element is a primitive value.  The json_tree(X) function recursively walks "
"through the JSON substructure starting with the top-level element."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1044
msgid ""
"The json_each(X,P) and json_tree(X,P) functions work just like their "
"one-argument counterparts except that they treat the element identified by "
"path P as the top-level element."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1048
msgid ""
"The schema for the table returned by json_each() and json_tree() is as "
"follows:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1052
#, no-wrap
msgid ""
"CREATE TABLE json_tree(\n"
"    key ANY,             -- key for current element relative to its parent\n"
"    value ANY,           -- value for the current element\n"
"    type TEXT,           -- 'object','array','string','integer', etc.\n"
"    atom ANY,            -- value for primitive types, null for array & "
"object\n"
"    id INTEGER,          -- integer ID for this element\n"
"    parent INTEGER,      -- integer ID for the parent of this element\n"
"    fullkey TEXT,        -- full path describing the current element\n"
"    path TEXT,           -- path to the container of the current row\n"
"    json JSON HIDDEN,    -- 1st input parameter: the raw JSON\n"
"    root TEXT HIDDEN     -- 2nd input parameter: the PATH at which to "
"start\n"
");\n"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1067
msgid ""
"The \"key\" column is the integer array index for elements of a JSON array "
"and the text label for elements of a JSON object.  The key column is NULL in "
"all other cases."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1072
msgid ""
"The \"atom\" column is the SQL value corresponding to primitive elements - "
"elements other than JSON arrays and objects.  The \"atom\" column is NULL "
"for a JSON array or object.  The \"value\" column is the same as the "
"\"atom\" column for primitive JSON elements but takes on the text JSON value "
"for arrays and objects."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1079
msgid ""
"The \"type\" column is an SQL text value taken from ('null', 'true', "
"'false', 'integer', 'real', 'text', 'array', 'object') according to the type "
"of the current JSON element."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1084
msgid ""
"The \"id\" column is an integer that identifies a specific JSON element "
"within the complete JSON string.  The \"id\" integer is an internal "
"housekeeping number, the computation of which might change in future "
"releases.  The only guarantee is that the \"id\" column will be different "
"for every row."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1090
msgid ""
"The \"parent\" column is always NULL for json_each().  For json_tree(), the "
"\"parent\" column is the \"id\" integer for the parent of the current "
"element, or NULL for the top-level JSON element or the element identified by "
"the root path in the second argument."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1097
msgid ""
"The \"fullkey\" column is a text path that uniquely identifies the current "
"row element within the original JSON string.  The complete key to the true "
"top-level element is returned even if an alternative starting point is "
"provided by the \"root\" argument."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1103
msgid ""
"The \"path\" column is the path to the array or object container that holds "
"the current row, or the path to the current row in the case where the "
"iteration starts on a primitive type and thus only provides a single row of "
"output."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><h3>
#: sedout/json1.html:1108
msgid "<span>4.14.1. </span>Examples using json_each() and json_tree()"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1110
msgid ""
"Suppose the table \"CREATE TABLE user(name,phone)\" stores zero or more "
"phone numbers as a JSON array object in the user.phone field.  To find all "
"users who have any phone number with a 704 area code:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1115
#, no-wrap
msgid ""
"SELECT DISTINCT user.name\n"
"  FROM user, json_each(user.phone)\n"
" WHERE json_each.value LIKE '704-%';\n"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1120
msgid ""
"Now suppose the user.phone field contains plain text if the user has only a "
"single phone number and a JSON array if the user has multiple phone "
"numbers.  The same question is posed: \"Which users have a phone number in "
"the 704 area code?\" But now the json_each() function can only be called for "
"those users that have two or more phone numbers since json_each()  requires "
"well-formed JSON as its first argument:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1128
#, no-wrap
msgid ""
"SELECT name FROM user WHERE phone LIKE '704-%'\n"
"UNION\n"
"SELECT user.name\n"
"  FROM user, json_each(user.phone)\n"
" WHERE json_valid(user.phone)\n"
"   AND json_each.value LIKE '704-%';\n"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1136
msgid ""
"Consider a different database with \"CREATE TABLE big(json JSON)\".  To see "
"a complete line-by-line decomposition of the data:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1140
#, no-wrap
msgid ""
"SELECT big.rowid, fullkey, value\n"
"  FROM big, json_tree(big.json)\n"
" WHERE json_tree.type NOT IN ('object','array');\n"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1145
msgid ""
"In the previous, the \"type NOT IN ('object','array')\" term of the WHERE "
"clause suppresses containers and only lets through leaf elements.  The same "
"effect could be achieved this way:"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1150
#, no-wrap
msgid ""
"SELECT big.rowid, fullkey, atom\n"
"  FROM big, json_tree(big.json)\n"
" WHERE atom IS NOT NULL;\n"
msgstr ""

#. type: Content of: <html><body><div><p><p><p><p>
#: sedout/json1.html:1155
msgid ""
"Suppose each entry in the BIG table is a JSON object with a '$.id' field "
"that is a unique identifier and a '$.partlist' field that can be a deeply "
"nested object.  You want to find the id of every entry that contains one or "
"more references to uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' anywhere in "
"its '$.partlist'."
msgstr ""

#. type: Content of: <html><body><div><p><p><p><blockquote><pre>
#: sedout/json1.html:1163
#, no-wrap
msgid ""
"SELECT DISTINCT json_extract(big.json,'$.id')\n"
"  FROM big, json_tree(big.json, '$.partlist')\n"
" WHERE json_tree.key='uuid'\n"
"   AND json_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';\n"
msgstr ""
