# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-16 16:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><head><meta><meta><link><title>
#: sedout/undoredo.html:6
msgid "Automatic Undo/Redo With SQLite"
msgstr ""

#. type: Content of: <html><body><div><a>
#: sedout/undoredo.html:11
msgid "<a href=\"index.html\">"
msgstr ""

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/undoredo.html:12
msgid "SQLite"
msgstr ""

#. type: Content of: <html><body><div><div>
#: sedout/undoredo.html:16
msgid "Small. Fast. Reliable."
msgstr ""

#. type: Content of: <html><body><div><div><br>
#: sedout/undoredo.html:16
msgid "Choose any three."
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/undoredo.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/undoredo.html:21
msgid "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/undoredo.html:22 sedout/undoredo.html:34
msgid "<a href='about.html'>About</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/undoredo.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/undoredo.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/undoredo.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/undoredo.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/undoredo.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/undoredo.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/undoredo.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/undoredo.html:36
msgid "<a href='download.html'>Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/undoredo.html:37
msgid "<a href='support.html'>Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/undoredo.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><form><select>
#: sedout/undoredo.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/undoredo.html:44
msgid "Search Documentation"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/undoredo.html:45
msgid "Search Changelog"
msgstr ""

#. type: Content of: <html><body><div><div><form>
#: sedout/undoredo.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr ""

#. type: Content of: <html><body><script>
#: sedout/undoredo.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( "
"w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ "
"w.style.display = \"block\"; } } function toggle_search() { var w = "
"document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ "
"w.style.display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function "
"div_off(nm){document.getElementById(nm).style.display=\"none\";} "
"window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the "
"Search feature if we are not operating from CGI, since */ /* Search is "
"accomplished using CGI and will not work without it. */ if( !location.origin "
"|| !location.origin.match || !location.origin.match(/http/) ){ "
"document.getElementById(\"search_menubutton\").style.display = \"none\"; } "
"/* Used by the Hide/Show button beside syntax diagrams, to toggle the */ "
"function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = "
"document.getElementById(btn); if( x.style.display!='none' ){ x.style.display "
"= 'none'; b.innerHTML='show'; }else{ x.style.display = ''; "
"b.innerHTML='hide'; } return false; } var antiRobot = 0; function "
"antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = "
"document.getElementById(\"mtimelink\"); if(j && "
"j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } "
"function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot "
"|= 2; antiRobotGo(); document.body.onmousedown=null; } "
"document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); "
"document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; "
"antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"
msgstr ""

#. type: Content of: <html><body><h1>
#: sedout/undoredo.html:122
msgid "Automatic Undo/Redo Using SQLite"
msgstr ""

#. type: Content of: <html><body><p>
#: sedout/undoredo.html:126
msgid ""
"This page demonstrates how to use triggers to implement undo/redo logic for "
"an application that uses SQLite as its <a "
"href=\"appfileformat.html\">application file format</a>."
msgstr ""

#. type: Content of: <html><body><p><h2>
#: sedout/undoredo.html:130
msgid "Object-Oriented Design"
msgstr ""

#. type: Content of: <html><body><p><p>
#: sedout/undoredo.html:133
msgid ""
"This design note considers the database to be a collection of objects.  Each "
"SQL table is a class.  Each row is an instance of that class.  There are, of "
"course, other ways to interpret an SQL database schema, and the techniques "
"described here work equally well under alternative interpretations, but an "
"object-oriented view seems be more natural to most contemporary programmers."
msgstr ""

#. type: Content of: <html><body><p><p><h2>
#: sedout/undoredo.html:141
msgid "Capture Changes Using Triggers"
msgstr ""

#. type: Content of: <html><body><p><p><p>
#: sedout/undoredo.html:144
msgid ""
"The core idea is to create a special table (named \"UNDOLOG\" in the "
"example)  that holds information needed to undo/redo changes to the "
"database.  For each class (table) in the database that wants to participate "
"in the undo/redo, triggers are created that cause entries to be made in the "
"UNDOLOG table for each DELETE, INSERT, and UPDATE of the participating "
"class.  The UNDOLOG entries consist of ordinary SQL statements the can be "
"played back to reverse the changes."
msgstr ""

#. type: Content of: <html><body><p><p><p><p>
#: sedout/undoredo.html:154
msgid ""
"For example, suppose you wanted undo/redo on a class (table)  that looks "
"like this:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><blockquote><pre>
#: sedout/undoredo.html:158
#, no-wrap
msgid "CREATE TABLE ex1(a,b,c);\n"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p>
#: sedout/undoredo.html:162
msgid "Triggers to record changes to table EX1 might look like this:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><blockquote><pre>
#: sedout/undoredo.html:165
#, no-wrap
msgid ""
"CREATE TEMP TRIGGER ex1_it AFTER INSERT ON ex1 BEGIN\n"
"  INSERT INTO undolog VALUES(NULL,'DELETE FROM ex1 WHERE "
"rowid='||new.rowid);\n"
"END;\n"
"CREATE TEMP TRIGGER ex1_ut AFTER UPDATE ON ex1 BEGIN\n"
"  INSERT INTO undolog VALUES(NULL,'UPDATE ex1\n"
"     SET a='||quote(old.a)||',b='||quote(old.b)||',c='||quote(old.c)||'\n"
"   WHERE rowid='||old.rowid);\n"
"END;\n"
"CREATE TEMP TRIGGER ex1_dt BEFORE DELETE ON ex1 BEGIN\n"
"  INSERT INTO undolog VALUES(NULL,'INSERT INTO ex1(rowid,a,b,c)\n"
"    VALUES('||old.rowid||','||quote(old.a)||','||quote(old.b)||\n"
"           ','||quote(old.c)||')');\n"
"END;\n"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p>
#: sedout/undoredo.html:181
msgid ""
"After each INSERT on ex1, the ex1_it trigger constructs text of a DELETE "
"statement that will undo the INSERT. The ex1_ut trigger constructs an UPDATE "
"statement that will undo the effects of an UPDATE.  And the ex1_dt trigger "
"constructs a statement that will undo the effects of a DELETE."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p>
#: sedout/undoredo.html:188
msgid ""
"Note the use of the <a href=\"lang_corefunc.html#quote\">quote() SQL "
"function</a> in these triggers.  The quote() function converts its argument "
"into a form that is appropriate for inclusion in an SQL statement. Numeric "
"values come through unchanged. Single quotes are added before and after "
"strings and any internal single quotes are escaped.  BLOB values are "
"rendered using SQL-standard hexadecimal BLOB notation.  The use of the "
"quote() function ensures that the SQL statements used to undo and redo are "
"always safe from SQL injection."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><h2>
#: sedout/undoredo.html:197
msgid "Automatic Creation Of Triggers"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:200
msgid ""
"Triggers such as the above could be entered manually, but that is tedious.  "
"An important feature of the technique demonstrated below is that the "
"triggers are generated automatically."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:205
msgid ""
"The implementation language for the example code is <a "
"href=\"http://www.tcl-lang.org\">TCL</a>, though you can easily do the same "
"thing in another programming language.  Remember that the code here is a "
"demonstration of the technique, not a drop-in module that will automatically "
"do everything for you.  The demonstration code shown below is derived from "
"actual code in production use. But you will need to make changes to tailor "
"it to your application."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:215
msgid ""
"To activate the undo/redo logic, invoke the undo::activate command with all "
"classes (tables) that are to participate in the undo/redo as arguments. Use "
"undo::deactivate, undo::freeze, and undo::unfreeze to control the state of "
"the undo/redo mechanism."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:221
msgid ""
"The undo::activate command creates temporary triggers in the database that "
"record all changes made to the tables named in the arguments."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><h2>
#: sedout/undoredo.html:224
msgid "Application Interface"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:227
msgid ""
"After a sequence of changes that define a single undo/redo step, invoke the "
"undo::barrier command to define the limit of that step.  In an interactive "
"program, you can call undo::event after any change and undo::barrier will be "
"called automatically as an idle callback."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:233
msgid ""
"When the user presses the Undo button, invoke undo::undo.  Invoke undo::redo "
"when the user presses the Redo button."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:237
msgid ""
"On each call to undo::undo or undo::redo, the undo/redo module automatically "
"invokes methods status_refresh and reload_all in all toplevel "
"namespaces. These methods should be defined to reconstruct the display or "
"otherwise update the state of the program based on the undone/redone changes "
"to the database."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:244
msgid ""
"The demonstration code below includes a status_refresh method that grays-out "
"or activates the Undo and Redo buttons and menu entries depending on whether "
"or not there is anything to be undone or redone. You will need to redefine "
"this method to control the Undo and Redo buttons in your application."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:251
msgid ""
"The demonstration code assumes that the SQLite database is opened used as a "
"database object named \"db\"."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><h2>
#: sedout/undoredo.html:254
msgid "Example Code"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><blockquote><pre>
#: sedout/undoredo.html:258
#, no-wrap
msgid ""
"# Everything goes in a private namespace\n"
"namespace eval ::undo {\n"
"\n"
"# proc:  ::undo::activate TABLE ...\n"
"# title: Start up the undo/redo system\n"
"#\n"
"# Arguments should be one or more database tables (in the database "
"associated\n"
"# with the handle \"db\") whose changes are to be recorded for undo/redo\n"
"# purposes.\n"
"#\n"
"proc activate {args} {\n"
"  variable _undo\n"
"  if {$_undo(active)} return\n"
"  eval _create_triggers db $args\n"
"  set _undo(undostack) {}\n"
"  set _undo(redostack) {}\n"
"  set _undo(active) 1\n"
"  set _undo(freeze) -1\n"
"  _start_interval\n"
"}\n"
"\n"
"# proc:  ::undo::deactivate\n"
"# title: Halt the undo/redo system and delete the undo/redo stacks\n"
"#\n"
"proc deactivate {} {\n"
"  variable _undo\n"
"  if {!$_undo(active)} return\n"
"  _drop_triggers db\n"
"  set _undo(undostack) {}\n"
"  set _undo(redostack) {}\n"
"  set _undo(active) 0\n"
"  set _undo(freeze) -1\n"
"}\n"
"\n"
"# proc:  ::undo::freeze\n"
"# title: Stop accepting database changes into the undo stack\n"
"#\n"
"# From the point when this routine is called up until the next unfreeze,\n"
"# new database changes are rejected from the undo stack.\n"
"#\n"
"proc freeze {} {\n"
"  variable _undo\n"
"  if {!&#91;info exists _undo(freeze)&#93;} return\n"
"  if {$_undo(freeze)&gt;=0} {error \"recursive call to ::undo::freeze\"}\n"
"  set _undo(freeze) &#91;db one {SELECT coalesce(max(seq),0) FROM "
"undolog}&#93;\n"
"}\n"
"\n"
"# proc:  ::undo::unfreeze\n"
"# title: Begin accepting undo actions again.\n"
"#\n"
"proc unfreeze {} {\n"
"  variable _undo\n"
"  if {!&#91;info exists _undo(freeze)&#93;} return\n"
"  if {$_undo(freeze)&lt0} {error \"called ::undo::unfreeze while not "
"frozen\"}\n"
"  db eval \"DELETE FROM undolog WHERE seq>$_undo(freeze)\"\n"
"  set _undo(freeze) -1\n"
"}\n"
"\n"
"# proc:  ::undo::event\n"
"# title: Something undoable has happened\n"
"#\n"
"# This routine is called whenever an undoable action occurs.  Arrangements\n"
"# are made to invoke ::undo::barrier no later than the next idle moment.\n"
"#\n"
"proc event {} {\n"
"  variable _undo\n"
"  if {$_undo(pending)==\"\"} {\n"
"    set _undo(pending) &#91;after idle ::undo::barrier&#93;\n"
"  }\n"
"}\n"
"\n"
"# proc:  ::undo::barrier\n"
"# title: Create an undo barrier right now.\n"
"#\n"
"proc barrier {} {\n"
"  variable _undo\n"
"  catch {after cancel $_undo(pending)}\n"
"  set _undo(pending) {}\n"
"  if {!$_undo(active)} {\n"
"    refresh\n"
"    return\n"
"  }\n"
"  set end &#91;db one {SELECT coalesce(max(seq),0) FROM undolog}&#93;\n"
"  if {$_undo(freeze)&gt;=0 && $end>$_undo(freeze)} {set end "
"$_undo(freeze)}\n"
"  set begin $_undo(firstlog)\n"
"  _start_interval\n"
"  if {$begin==$_undo(firstlog)} {\n"
"    refresh\n"
"    return\n"
"  }\n"
"  lappend _undo(undostack) &#91;list $begin $end&#93;\n"
"  set _undo(redostack) {}\n"
"  refresh\n"
"}\n"
"\n"
"# proc:  ::undo::undo\n"
"# title: Do a single step of undo\n"
"#\n"
"proc undo {} {\n"
"  _step undostack redostack\n"
"}\n"
"\n"
"# proc:  ::undo::redo\n"
"# title: Redo a single step\n"
"#\n"
"proc redo {} {\n"
"  _step redostack undostack\n"
"}\n"
"\n"
"# proc:   ::undo::refresh\n"
"# title:  Update the status of controls after a database change\n"
"#\n"
"# The undo module calls this routine after any undo/redo in order to\n"
"# cause controls gray out appropriately depending on the current state\n"
"# of the database.  This routine works by invoking the status_refresh\n"
"# module in all top-level namespaces.\n"
"#\n"
"proc refresh {} {\n"
"  set body {}\n"
"  foreach ns &#91;namespace children ::&#93; {\n"
"    if {&#91;info proc ${ns}::status_refresh&#93;==\"\"} continue\n"
"    append body ${ns}::status_refresh\\n\n"
"  }\n"
"  proc ::undo::refresh {} $body\n"
"  refresh\n"
"}\n"
"\n"
"# proc:   ::undo::reload_all\n"
"# title:  Redraw everything based on the current database\n"
"#\n"
"# The undo module calls this routine after any undo/redo in order to\n"
"# cause the screen to be completely redrawn based on the current database\n"
"# contents.  This is accomplished by calling the \"reload\" module in\n"
"# every top-level namespace other than ::undo.\n"
"#\n"
"proc reload_all {} {\n"
"  set body {}\n"
"  foreach ns &#91;namespace children ::&#93; {\n"
"    if {&#91;info proc ${ns}::reload&#93;==\"\"} continue\n"
"    append body ${ns}::reload\\n\n"
"  }\n"
"  proc ::undo::reload_all {} $body\n"
"  reload_all\n"
"}\n"
"\n"
"##############################################################################\n"
"# The public interface to this module is above.  Routines and variables "
"that\n"
"# follow (and whose names begin with \"_\") are private to this module.\n"
"##############################################################################\n"
"\n"
"# state information\n"
"#\n"
"set _undo(active) 0\n"
"set _undo(undostack) {}\n"
"set _undo(redostack) {}\n"
"set _undo(pending) {}\n"
"set _undo(firstlog) 1\n"
"set _undo(startstate) {}\n"
"\n"
"\n"
"# proc:  ::undo::status_refresh\n"
"# title: Enable and/or disable menu options a buttons\n"
"#\n"
"proc status_refresh {} {\n"
"  variable _undo\n"
"  if {!$_undo(active) || &#91;llength $_undo(undostack)&#93;==0} {\n"
"    .mb.edit entryconfig Undo -state disabled\n"
"    .bb.undo config -state disabled\n"
"  } else {\n"
"    .mb.edit entryconfig Undo -state normal\n"
"    .bb.undo config -state normal\n"
"  }\n"
"  if {!$_undo(active) || &#91;llength $_undo(redostack)&#93;==0} {\n"
"    .mb.edit entryconfig Redo -state disabled\n"
"    .bb.redo config -state disabled\n"
"  } else {\n"
"    .mb.edit entryconfig Redo -state normal\n"
"    .bb.redo config -state normal\n"
"  }\n"
"}\n"
"\n"
"# xproc:  ::undo::_create_triggers DB TABLE1 TABLE2 ...\n"
"# title:  Create change recording triggers for all tables listed\n"
"#\n"
"# Create a temporary table in the database named \"undolog\".  Create\n"
"# triggers that fire on any insert, delete, or update of TABLE1, TABLE2, "
"....\n"
"# When those triggers fire, insert records in undolog that contain\n"
"# SQL text for statements that will undo the insert, delete, or update.\n"
"#\n"
"proc _create_triggers {db args} {\n"
"  catch {$db eval {DROP TABLE undolog}}\n"
"  $db eval {CREATE TEMP TABLE undolog(seq integer primary key, sql text)}\n"
"  foreach tbl $args {\n"
"    set collist &#91;$db eval \"pragma table_info($tbl)\"&#93;\n"
"    set sql \"CREATE TEMP TRIGGER _${tbl}_it AFTER INSERT ON $tbl "
"BEGIN\\n\"\n"
"    append sql \"  INSERT INTO undolog VALUES(NULL,\"\n"
"    append sql \"'DELETE FROM $tbl WHERE rowid='||new.rowid);\\nEND;\\n\"\n"
"\n"
"    append sql \"CREATE TEMP TRIGGER _${tbl}_ut AFTER UPDATE ON $tbl "
"BEGIN\\n\"\n"
"    append sql \"  INSERT INTO undolog VALUES(NULL,\"\n"
"    append sql \"'UPDATE $tbl \"\n"
"    set sep \"SET \"\n"
"    foreach {x1 name x2 x3 x4 x5} $collist {\n"
"      append sql \"$sep$name='||quote(old.$name)||'\"\n"
"      set sep \",\"\n"
"    }\n"
"    append sql \" WHERE rowid='||old.rowid);\\nEND;\\n\"\n"
"\n"
"    append sql \"CREATE TEMP TRIGGER _${tbl}_dt BEFORE DELETE ON $tbl "
"BEGIN\\n\"\n"
"    append sql \"  INSERT INTO undolog VALUES(NULL,\"\n"
"    append sql \"'INSERT INTO ${tbl}(rowid\"\n"
"    foreach {x1 name x2 x3 x4 x5} $collist {append sql ,$name}\n"
"    append sql \") VALUES('||old.rowid||'\"\n"
"    foreach {x1 name x2 x3 x4 x5} $collist {append sql "
",'||quote(old.$name)||'}\n"
"    append sql \")');\\nEND;\\n\"\n"
"\n"
"    $db eval $sql\n"
"  }\n"
"}\n"
"\n"
"# xproc:  ::undo::_drop_triggers DB\n"
"# title:  Drop all of the triggers that _create_triggers created\n"
"#\n"
"proc _drop_triggers {db} {\n"
"  set tlist &#91;$db eval {SELECT name FROM sqlite_temp_schema\n"
"                       WHERE type='trigger'}&#93;\n"
"  foreach trigger $tlist {\n"
"    if {!&#91;regexp {_.*_(i|u|d)t$} $trigger&#93;} continue\n"
"    $db eval \"DROP TRIGGER $trigger;\"\n"
"  }\n"
"  catch {$db eval {DROP TABLE undolog}}\n"
"}\n"
"\n"
"# xproc: ::undo::_start_interval\n"
"# title: Record the starting conditions of an undo interval\n"
"#\n"
"proc _start_interval {} {\n"
"  variable _undo\n"
"  set _undo(firstlog) &#91;db one {SELECT coalesce(max(seq),0)+1 FROM "
"undolog}&#93;\n"
"}\n"
"\n"
"# xproc: ::undo::_step V1 V2\n"
"# title: Do a single step of undo or redo\n"
"#\n"
"# For an undo V1==\"undostack\" and V2==\"redostack\".  For a redo,\n"
"# V1==\"redostack\" and V2==\"undostack\".\n"
"#\n"
"proc _step {v1 v2} {\n"
"  variable _undo\n"
"  set op &#91;lindex $_undo($v1) end&#93;\n"
"  set _undo($v1) &#91;lrange $_undo($v1) 0 end-1&#93;\n"
"  foreach {begin end} $op break\n"
"  db eval BEGIN\n"
"  set q1 \"SELECT sql FROM undolog WHERE seq&gt;=$begin AND seq&lt;=$end\n"
"          ORDER BY seq DESC\"\n"
"  set sqllist &#91;db eval $q1&#93;\n"
"  db eval \"DELETE FROM undolog WHERE seq&gt;=$begin AND seq&lt;=$end\"\n"
"  set _undo(firstlog) &#91;db one {SELECT coalesce(max(seq),0)+1 FROM "
"undolog}&#93;\n"
"  foreach sql $sqllist {\n"
"    db eval $sql\n"
"  }\n"
"  db eval COMMIT\n"
"  reload_all\n"
"\n"
"  set end &#91;db one {SELECT coalesce(max(seq),0) FROM undolog}&#93;\n"
"  set begin $_undo(firstlog)\n"
"  lappend _undo($v2) &#91;list $begin $end&#93;\n"
"  _start_interval\n"
"  refresh\n"
"}\n"
"\n"
"\n"
"# End of the ::undo namespace\n"
"}\n"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/undoredo.html:533
msgid ""
"<small><i>This page last modified on <a "
"href=\"https://sqlite.org/docsrc/honeypot\" id=\"mtimelink\" "
"data-href=\"https://sqlite.org/docsrc/finfo/pages/undoredo.in?m=741a21510c\">2022-04-18 "
"02:55:50</a> UTC </i></small>"
msgstr ""
