# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-16 16:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><head><meta><meta><link><title>
#: sedout/unlock_notify.html:6
msgid "SQLite Unlock-Notify API"
msgstr ""

#. type: Content of: <html><body><div><a>
#: sedout/unlock_notify.html:11
msgid "<a href=\"index.html\">"
msgstr ""

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/unlock_notify.html:12
msgid "SQLite"
msgstr ""

#. type: Content of: <html><body><div><div>
#: sedout/unlock_notify.html:16
msgid "Small. Fast. Reliable."
msgstr ""

#. type: Content of: <html><body><div><div><br>
#: sedout/unlock_notify.html:16
msgid "Choose any three."
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/unlock_notify.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/unlock_notify.html:21
msgid "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/unlock_notify.html:22 sedout/unlock_notify.html:34
msgid "<a href='about.html'>About</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/unlock_notify.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/unlock_notify.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/unlock_notify.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/unlock_notify.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/unlock_notify.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/unlock_notify.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/unlock_notify.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/unlock_notify.html:36
msgid "<a href='download.html'>Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/unlock_notify.html:37
msgid "<a href='support.html'>Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/unlock_notify.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><form><select>
#: sedout/unlock_notify.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/unlock_notify.html:44
msgid "Search Documentation"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/unlock_notify.html:45
msgid "Search Changelog"
msgstr ""

#. type: Content of: <html><body><div><div><form>
#: sedout/unlock_notify.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr ""

#. type: Content of: <html><body><script>
#: sedout/unlock_notify.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( "
"w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ "
"w.style.display = \"block\"; } } function toggle_search() { var w = "
"document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ "
"w.style.display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function "
"div_off(nm){document.getElementById(nm).style.display=\"none\";} "
"window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the "
"Search feature if we are not operating from CGI, since */ /* Search is "
"accomplished using CGI and will not work without it. */ if( !location.origin "
"|| !location.origin.match || !location.origin.match(/http/) ){ "
"document.getElementById(\"search_menubutton\").style.display = \"none\"; } "
"/* Used by the Hide/Show button beside syntax diagrams, to toggle the */ "
"function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = "
"document.getElementById(btn); if( x.style.display!='none' ){ x.style.display "
"= 'none'; b.innerHTML='show'; }else{ x.style.display = ''; "
"b.innerHTML='hide'; } return false; } var antiRobot = 0; function "
"antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = "
"document.getElementById(\"mtimelink\"); if(j && "
"j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } "
"function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot "
"|= 2; antiRobotGo(); document.body.onmousedown=null; } "
"document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); "
"document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; "
"antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"
msgstr ""

#. type: Content of: <html><body><style>
#: sedout/unlock_notify.html:122
msgid ""
"pre a:visited, pre a:link { text-decoration: none ; color: #40534b } pre { "
"background: #F3F3F3; float: right; padding: 1ex 2ex; margin-left: 1em; "
"border: solid black 1px; } h1,h2 { clear: both ; text-align: center }"
msgstr ""

#. type: Content of: <html><body><h1>
#: sedout/unlock_notify.html:133
msgid "Using the sqlite3_unlock_notify() API"
msgstr ""

#. type: Content of: <html><body><pre>
#: sedout/unlock_notify.html:136
#, no-wrap
msgid ""
"<span style=\"color:blue;font-style:italic\">/* This example uses the "
"pthreads API */</span>\n"
"#include &lt;pthread.h&gt;\n"
"\n"
"<span style=\"color:blue;font-style:italic\">/*</span>\n"
"<span style=\"color:blue;font-style:italic\">** A pointer to an instance of "
"this structure is passed as the user-context</span>\n"
"<span style=\"color:blue;font-style:italic\">** pointer when registering for "
"an unlock-notify callback.</span>\n"
"<span style=\"color:blue;font-style:italic\">*/</span>\n"
"typedef struct UnlockNotification UnlockNotification;\n"
"struct UnlockNotification {\n"
"  int fired;                         <span "
"style=\"color:blue;font-style:italic\">/* True after unlock event has "
"occurred */</span>\n"
"  pthread_cond_t cond;               <span "
"style=\"color:blue;font-style:italic\">/* Condition variable to wait on "
"*/</span>\n"
"  pthread_mutex_t mutex;             <span "
"style=\"color:blue;font-style:italic\">/* Mutex to protect structure "
"*/</span>\n"
"};\n"
"\n"
"<span style=\"color:blue;font-style:italic\">/*</span>\n"
"<span style=\"color:blue;font-style:italic\">** This function is an "
"unlock-notify callback registered with SQLite.</span>\n"
"<span style=\"color:blue;font-style:italic\">*/</span>\n"
"static void unlock_notify_cb(void **apArg, int nArg){\n"
"  int i;\n"
"  for(i=0; i&lt;nArg; i++){\n"
"    UnlockNotification *p = (UnlockNotification *)apArg[i];\n"
"    pthread_mutex_lock(&p-&gt;mutex);\n"
"    p-&gt;fired = 1;\n"
"    pthread_cond_signal(&p-&gt;cond);\n"
"    pthread_mutex_unlock(&p-&gt;mutex);\n"
"  }\n"
"}\n"
"\n"
"<span style=\"color:blue;font-style:italic\">/*</span>\n"
"<span style=\"color:blue;font-style:italic\">** This function assumes that "
"an SQLite API call (either <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2</a>() </span>\n"
"<span style=\"color:blue;font-style:italic\">** or <a "
"href=\"c3ref/step.html\">sqlite3_step</a>()) has just returned "
"SQLITE_LOCKED. The argument is the</span>\n"
"<span style=\"color:blue;font-style:italic\">** associated database "
"connection.</span>\n"
"<span style=\"color:blue;font-style:italic\">**</span>\n"
"<span style=\"color:blue;font-style:italic\">** This function calls <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify</a>() to register "
"for an </span>\n"
"<span style=\"color:blue;font-style:italic\">** unlock-notify callback, then "
"blocks until that callback is delivered </span>\n"
"<span style=\"color:blue;font-style:italic\">** and returns SQLITE_OK. The "
"caller should then retry the failed operation.</span>\n"
"<span style=\"color:blue;font-style:italic\">**</span>\n"
"<span style=\"color:blue;font-style:italic\">** Or, if <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify</a>() indicates that "
"to block would deadlock </span>\n"
"<span style=\"color:blue;font-style:italic\">** the system, then this "
"function returns SQLITE_LOCKED immediately. In </span>\n"
"<span style=\"color:blue;font-style:italic\">** this case the caller should "
"not retry the operation and should roll </span>\n"
"<span style=\"color:blue;font-style:italic\">** back the current transaction "
"(if any).</span>\n"
"<span style=\"color:blue;font-style:italic\">*/</span>\n"
"static int wait_for_unlock_notify(<a href=\"c3ref/sqlite3.html\">sqlite3</a> "
"*db){\n"
"  int rc;\n"
"  UnlockNotification un;\n"
"\n"
"  <span style=\"color:blue;font-style:italic\">/* Initialize the "
"UnlockNotification structure. */</span>\n"
"  un.fired = 0;\n"
"  pthread_mutex_init(&un.mutex, 0);\n"
"  pthread_cond_init(&un.cond, 0);\n"
"\n"
"  <span style=\"color:blue;font-style:italic\">/* Register for an "
"unlock-notify callback. */</span>\n"
"  rc = <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify</a>(db, "
"unlock_notify_cb, (void *)&un);\n"
"  assert( rc==SQLITE_LOCKED || rc==SQLITE_OK );\n"
"\n"
"  <span style=\"color:blue;font-style:italic\">/* The call to <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify</a>() always returns "
"either SQLITE_LOCKED </span>\n"
"<span style=\"color:blue;font-style:italic\">  ** or SQLITE_OK. </span>\n"
"<span style=\"color:blue;font-style:italic\">  **</span>\n"
"<span style=\"color:blue;font-style:italic\">  ** If SQLITE_LOCKED was "
"returned, then the system is deadlocked. In this</span>\n"
"<span style=\"color:blue;font-style:italic\">  ** case this function needs "
"to return SQLITE_LOCKED to the caller so </span>\n"
"<span style=\"color:blue;font-style:italic\">  ** that the current "
"transaction can be rolled back. Otherwise, block</span>\n"
"<span style=\"color:blue;font-style:italic\">  ** until the unlock-notify "
"callback is invoked, then return SQLITE_OK.</span>\n"
"  <span style=\"color:blue;font-style:italic\">*/</span>\n"
"  if( rc==SQLITE_OK ){\n"
"    pthread_mutex_lock(&un.mutex);\n"
"    if( !un.fired ){\n"
"      pthread_cond_wait(&un.cond, &un.mutex);\n"
"    }\n"
"    pthread_mutex_unlock(&un.mutex);\n"
"  }\n"
"\n"
"  <span style=\"color:blue;font-style:italic\">/* Destroy the mutex and "
"condition variables. */</span>\n"
"  pthread_cond_destroy(&un.cond);\n"
"  pthread_mutex_destroy(&un.mutex);\n"
"\n"
"  return rc;\n"
"}\n"
"\n"
"<span style=\"color:blue;font-style:italic\">/*</span>\n"
"<span style=\"color:blue;font-style:italic\">** This function is a wrapper "
"around the SQLite function <a "
"href=\"c3ref/step.html\">sqlite3_step</a>().</span>\n"
"<span style=\"color:blue;font-style:italic\">** It functions in the same way "
"as step(), except that if a required</span>\n"
"<span style=\"color:blue;font-style:italic\">** shared-cache lock cannot be "
"obtained, this function may block waiting for</span>\n"
"<span style=\"color:blue;font-style:italic\">** the lock to become "
"available. In this scenario the normal API step()</span>\n"
"<span style=\"color:blue;font-style:italic\">** function always returns "
"SQLITE_LOCKED.</span>\n"
"<span style=\"color:blue;font-style:italic\">**</span>\n"
"<span style=\"color:blue;font-style:italic\">** If this function returns "
"SQLITE_LOCKED, the caller should rollback</span>\n"
"<span style=\"color:blue;font-style:italic\">** the current transaction (if "
"any) and try again later. Otherwise, the</span>\n"
"<span style=\"color:blue;font-style:italic\">** system may become "
"deadlocked.</span>\n"
"<span style=\"color:blue;font-style:italic\">*/</span>\n"
"int sqlite3_blocking_step(<a href=\"c3ref/stmt.html\">sqlite3_stmt</a> "
"*pStmt){\n"
"  int rc;\n"
"  while( SQLITE_LOCKED==(rc = <a "
"href=\"c3ref/step.html\">sqlite3_step</a>(pStmt)) ){\n"
"    rc = wait_for_unlock_notify(<a "
"href=\"c3ref/db_handle.html\">sqlite3_db_handle</a>(pStmt));\n"
"    if( rc!=SQLITE_OK ) break;\n"
"    <a href=\"c3ref/reset.html\">sqlite3_reset</a>(pStmt);\n"
"  }\n"
"  return rc;\n"
"}\n"
"\n"
"<span style=\"color:blue;font-style:italic\">/*</span>\n"
"<span style=\"color:blue;font-style:italic\">** This function is a wrapper "
"around the SQLite function <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2</a>().</span>\n"
"<span style=\"color:blue;font-style:italic\">** It functions in the same way "
"as prepare_v2(), except that if a required</span>\n"
"<span style=\"color:blue;font-style:italic\">** shared-cache lock cannot be "
"obtained, this function may block waiting for</span>\n"
"<span style=\"color:blue;font-style:italic\">** the lock to become "
"available. In this scenario the normal API prepare_v2()</span>\n"
"<span style=\"color:blue;font-style:italic\">** function always returns "
"SQLITE_LOCKED.</span>\n"
"<span style=\"color:blue;font-style:italic\">**</span>\n"
"<span style=\"color:blue;font-style:italic\">** If this function returns "
"SQLITE_LOCKED, the caller should rollback</span>\n"
"<span style=\"color:blue;font-style:italic\">** the current transaction (if "
"any) and try again later. Otherwise, the</span>\n"
"<span style=\"color:blue;font-style:italic\">** system may become "
"deadlocked.</span>\n"
"<span style=\"color:blue;font-style:italic\">*/</span>\n"
"int sqlite3_blocking_prepare_v2(\n"
"  <a href=\"c3ref/sqlite3.html\">sqlite3</a> *db,              <span "
"style=\"color:blue;font-style:italic\">/* Database handle. */</span>\n"
"  const char *zSql,         <span style=\"color:blue;font-style:italic\">/* "
"UTF-8 encoded SQL statement. */</span>\n"
"  int nSql,                 <span style=\"color:blue;font-style:italic\">/* "
"Length of zSql in bytes. */</span>\n"
"  <a href=\"c3ref/stmt.html\">sqlite3_stmt</a> **ppStmt,    <span "
"style=\"color:blue;font-style:italic\">/* OUT: A pointer to the prepared "
"statement */</span>\n"
"  const char **pz           <span style=\"color:blue;font-style:italic\">/* "
"OUT: End of parsed string */</span>\n"
"){\n"
"  int rc;\n"
"  while( SQLITE_LOCKED==(rc = <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2</a>(db, zSql, nSql, ppStmt, "
"pz)) ){\n"
"    rc = wait_for_unlock_notify(db);\n"
"    if( rc!=SQLITE_OK ) break;\n"
"  }\n"
"  return rc;\n"
"}\n"
msgstr ""

#. type: Content of: <html><body><p>
#: sedout/unlock_notify.html:264
msgid ""
"When two or more connections access the same database in shared-cache mode, "
"read and write (shared and exclusive) locks on individual tables are used to "
"ensure that concurrently executing transactions are kept isolated. Before "
"writing to a table, a write (exclusive) lock must be obtained on that "
"table. Before reading, a read (shared) lock must be obtained. A connection "
"releases all held table locks when it concludes its transaction. If a "
"connection cannot obtain a required lock, then the call to <a "
"href=\"c3ref/step.html\">sqlite3_step()</a> returns SQLITE_LOCKED."
msgstr ""

#. type: Content of: <html><body><p><p>
#: sedout/unlock_notify.html:274
msgid ""
"Although it is less common, a call to <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare()</a> or <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2()</a> may also return "
"SQLITE_LOCKED if it cannot obtain a read-lock on the <a "
"href=\"schematab.html\">sqlite_schema table</a> of each attached "
"database. These APIs need to read the schema data contained in the "
"sqlite_schema table in order to compile SQL statements to <a "
"href=\"c3ref/stmt.html\">sqlite3_stmt*</a> objects."
msgstr ""

#. type: Content of: <html><body><p><p><p>
#: sedout/unlock_notify.html:281
msgid ""
"This article presents a technique using the SQLite <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> interface such "
"that calls to <a href=\"c3ref/step.html\">sqlite3_step()</a> and <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2()</a> block until the "
"required locks are available instead of returning SQLITE_LOCKED "
"immediately. If the sqlite3_blocking_step() or sqlite3_blocking_prepare_v2() "
"functions presented to the left return SQLITE_LOCKED, this indicates that to "
"block would deadlock the system."
msgstr ""

#. type: Content of: <html><body><p><p><p><p>
#: sedout/unlock_notify.html:290
msgid ""
"The <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> API, "
"which is only available if the library is compiled with the pre-processor "
"symbol <a "
"href=\"compile.html#enable_unlock_notify\">SQLITE_ENABLE_UNLOCK_NOTIFY</a> "
"defined, is <a href=\"c3ref/unlock_notify.html\">documented here</a>. This "
"article is not a substitute for reading the full API documentation!"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p>
#: sedout/unlock_notify.html:296
msgid ""
"The <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> "
"interface is designed for use in systems that have a separate thread "
"assigned to each <a href=\"c3ref/sqlite3.html\">database connection</a>.  "
"There is nothing in the implementation that prevents a single thread from "
"running multiple database connections.  However, the <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> interface only "
"works on a single connection at a time, so the lock resolution logic "
"presented here will only work for a single database connection per thread."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p>
#: sedout/unlock_notify.html:304
msgid "<b>The sqlite3_unlock_notify() API</b>"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:307
msgid ""
"After a call to <a href=\"c3ref/step.html\">sqlite3_step()</a> or <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2()</a> returns SQLITE_LOCKED, "
"the <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> API may "
"be invoked to register for an unlock-notify callback. The unlock-notify "
"callback is invoked by SQLite after the database connection holding the "
"table-lock that prevented the call to <a "
"href=\"c3ref/step.html\">sqlite3_step()</a> or <a "
"href=\"c3ref/prepare.html\">sqlite3_prepare_v2()</a> from succeeding has "
"finished its transaction and released all locks. For example, if a call to "
"sqlite3_step() is an attempt to read from table X, and some other connection "
"Y is holding a write-lock on table X, then sqlite3_step() will return "
"SQLITE_LOCKED. If <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> is then "
"called, the unlock-notify callback will be invoked after connection Y's "
"transaction is concluded. The connection that the unlock-notify callback is "
"waiting on, in this case connection Y, is known as the \"blocking "
"connection\"."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:321
msgid ""
"If a call to sqlite3_step() that attempts to write to a database table "
"returns SQLITE_LOCKED, then more than one other connection may be holding a "
"read-lock on the database table in question. In this case SQLite simply "
"selects one of those other connections arbitrarily and issues the "
"unlock-notify callback when that connection's transaction is finished.  "
"Whether the call to sqlite3_step() was blocked by one or many connections, "
"when the corresponding unlock-notify callback is issued it is not guaranteed "
"that the required lock is available, only that it may be."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:331
msgid ""
"When the unlock-notify callback is issued, it is issued from within a call "
"to sqlite3_step() (or sqlite3_close()) associated with the blocking "
"connection. It is illegal to invoke any sqlite3_XXX() API functions from "
"within an unlock-notify callback. The expected use is that the unlock-notify "
"callback will signal some other waiting thread or schedule some action to "
"take place later."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:339
msgid "The algorithm used by the sqlite3_blocking_step() function is as follows:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><ol><li>
#: sedout/unlock_notify.html:342
msgid ""
"Call sqlite3_step() on the supplied statement handle. If the call returns "
"anything other than SQLITE_LOCKED, then return this value to the "
"caller. Otherwise, continue."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><ol><li><li>
#: sedout/unlock_notify.html:346
msgid ""
"Invoke <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> on "
"the database connection handle associated with the supplied statement handle "
"to register for an unlock-notify callback. If the call to unlock_notify() "
"returns SQLITE_LOCKED, then return this value to the caller."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><ol><li><li><li>
#: sedout/unlock_notify.html:351
msgid "Block until the unlock-notify callback is invoked by another thread."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><ol><li><li><li><li>
#: sedout/unlock_notify.html:353
msgid ""
"Call sqlite3_reset() on the statement handle. Since an SQLITE_LOCKED error "
"may only occur on the first call to sqlite3_step()  (it is not possible for "
"one call to sqlite3_step() to return SQLITE_ROW and then the next "
"SQLITE_LOCKED), the statement handle may be reset at this point without "
"affecting the results of the query from the point of view of the caller. If "
"sqlite3_reset() were not called at this point, the next call to "
"sqlite3_step() would return SQLITE_MISUSE."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><ol><li><li><li><li><li>
#: sedout/unlock_notify.html:362
msgid "Return to step 1."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:366
msgid ""
"The algorithm used by the sqlite3_blocking_prepare_v2() function is similar, "
"except that step 4 (resetting the statement handle) is omitted."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:370
msgid "<b>Writer Starvation</b>"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:373
msgid ""
"Multiple connections may hold a read-lock simultaneously.  If many threads "
"are acquiring overlapping read-locks, it might be the case that at least one "
"thread is always holding a read lock.  Then a table waiting for a write-lock "
"will wait forever.  This scenario is called \"writer starvation.\""
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:380
msgid ""
"SQLite helps applications avoid writer starvation. After any attempt to "
"obtain a write-lock on a table fails (because one or more other connections "
"are holding read-locks), all attempts to open new transactions on the "
"shared-cache fail until one of the following is true:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ul><li>
#: sedout/unlock_notify.html:386
msgid "The current writer concludes its transaction, OR"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ul><li><li>
#: sedout/unlock_notify.html:387
msgid "The number of open read-transactions on the shared-cache drops to zero."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:391
msgid ""
"Failed attempts to open new read-transactions return SQLITE_LOCKED to the "
"caller. If the caller then calls <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> to register "
"for an unlock-notify callback, the blocking connection is the connection "
"that currently has an open write-transaction on the shared-cache. This "
"prevents writer-starvation since if no new read-transactions may be opened "
"and assuming all existing read-transactions are eventually concluded, the "
"writer will eventually have an opportunity to obtain the required "
"write-lock."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:400
msgid "<b>The pthreads API</b>"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:402
msgid ""
"By the time <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> "
"is invoked by wait_for_unlock_notify(), it is possible that the blocking "
"connection that prevented the sqlite3_step() or sqlite3_prepare_v2() call "
"from succeeding has already finished its transaction. In this case, the "
"unlock-notify callback is invoked immediately, before <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> returns. Or, "
"it is possible that the unlock-notify callback is invoked by a second thread "
"after <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> is "
"called but before the thread starts waiting to be asynchronously signaled."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:412
msgid ""
"Exactly how such a potential race-condition is handled depends on the "
"threads and synchronization primitives interface used by the application.  "
"This example uses pthreads, the interface provided by modern UNIX-like "
"systems, including Linux."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:417
msgid ""
"The pthreads interface provides the pthread_cond_wait() function.  This "
"function allows the caller to simultaneously release a mutex and start "
"waiting for an asynchronous signal. Using this function, a \"fired\" flag "
"and a mutex, the race-condition described above may be eliminated as "
"follows:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:423
msgid ""
"When the unlock-notify callback is invoked, which may be before the thread "
"that called <a href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> "
"begins waiting for the asynchronous signal, it does the following:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li>
#: sedout/unlock_notify.html:428 sedout/unlock_notify.html:438
msgid "Obtains the mutex."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li><li>
#: sedout/unlock_notify.html:429
msgid "Sets the \"fired\" flag to true."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li><li><li>
#: sedout/unlock_notify.html:430
msgid "Attempts to signal a waiting thread."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li><li><li><li>
#: sedout/unlock_notify.html:431
msgid "Releases the mutex."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:434
msgid ""
"When the wait_for_unlock_notify() thread is ready to begin waiting for the "
"unlock-notify callback to arrive, it:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li><li>
#: sedout/unlock_notify.html:439
msgid ""
"Checks if the \"fired\" flag has been set. If so, the unlock-notify callback "
"has already been invoked. Release the mutex and continue."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ol><li><li><li>
#: sedout/unlock_notify.html:441
msgid ""
"Atomically releases the mutex and begins waiting for the asynchronous "
"signal. When the signal arrives, continue."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:445
msgid ""
"This way, it doesn't matter if the unlock-notify callback has already been "
"invoked, or is being invoked, when the wait_for_unlock_notify()  thread "
"begins blocking."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:449
msgid "<b>Possible Enhancements</b>"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:451
msgid "The code in this article could be improved in at least two ways:"
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ul><li>
#: sedout/unlock_notify.html:454
msgid "It could manage thread priorities."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><ul><li><li>
#: sedout/unlock_notify.html:455
msgid ""
"It could handle a special case of SQLITE_LOCKED that can occur when dropping "
"a table or index."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:460
msgid ""
"Even though the <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> function only "
"allows the caller to specify a single user-context pointer, an unlock-notify "
"callback is passed an array of such context pointers. This is because if "
"when a blocking connection concludes its transaction, if there is more than "
"one unlock-notify registered to call the same C function, the "
"context-pointers are marshaled into an array and a single callback "
"issued. If each thread were assigned a priority, then instead of just "
"signaling the threads in arbitrary order as this implementation does, higher "
"priority threads could be signaled before lower priority threads."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:471
msgid ""
"If a \"DROP TABLE\" or \"DROP INDEX\" SQL command is executed, and the same "
"database connection currently has one or more actively executing SELECT "
"statements, then SQLITE_LOCKED is returned. If <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a> is called in "
"this case, then the specified callback will be invoked "
"immediately. Re-attempting the \"DROP TABLE\" or \"DROP INDEX\" statement "
"will return another SQLITE_LOCKED error. In the implementation of "
"sqlite3_blocking_step() shown to the left, this could cause an infinite "
"loop."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:481
msgid ""
"The caller could distinguish between this special \"DROP TABLE|INDEX\" case "
"and other cases by using <a href=\"rescode.html#extrc\">extended error "
"codes</a>. When it is appropriate to call <a "
"href=\"c3ref/unlock_notify.html\">sqlite3_unlock_notify()</a>, the extended "
"error code is SQLITE_LOCKED_SHAREDCACHE. Otherwise, in the \"DROP "
"TABLE|INDEX\" case, it is just plain SQLITE_LOCKED. Another solution might "
"be to limit the number of times that any single query could be reattempted "
"(to say 100). Although this might be less efficient than one might wish, the "
"situation in question is not likely to occur often."
msgstr ""

#. type: Content of: <html><body><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p><p>
#: sedout/unlock_notify.html:491
msgid ""
"<small><i>This page last modified on <a "
"href=\"https://sqlite.org/docsrc/honeypot\" id=\"mtimelink\" "
"data-href=\"https://sqlite.org/docsrc/finfo/pages/unlock_notify.in?m=490fe96500\">2022-01-08 "
"05:02:57</a> UTC </i></small>"
msgstr ""
