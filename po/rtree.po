# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-03-16 15:52+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><body><div><div><div>
#: sedout/rtree.html:6 sedout/rtree.html:121
msgid "The SQLite R*Tree Module"
msgstr ""

#. type: Content of: <html><body><div><a>
#: sedout/rtree.html:11
msgid "<a href=\"index.html\">"
msgstr ""

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/rtree.html:12
msgid "SQLite"
msgstr ""

#. type: Content of: <html><body><div><div>
#: sedout/rtree.html:16
msgid "Small. Fast. Reliable."
msgstr ""

#. type: Content of: <html><body><div><div><br>
#: sedout/rtree.html:16
msgid "Choose any three."
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/rtree.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/rtree.html:21
msgid "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/rtree.html:22 sedout/rtree.html:34
msgid "<a href='about.html'>About</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/rtree.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/rtree.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/rtree.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/rtree.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/rtree.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/rtree.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/rtree.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/rtree.html:36
msgid "<a href='download.html'>Download</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/rtree.html:37
msgid "<a href='support.html'>Support</a>"
msgstr ""

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/rtree.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr ""

#. type: Content of: <html><body><div><div><form><select>
#: sedout/rtree.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/rtree.html:44
msgid "Search Documentation"
msgstr ""

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/rtree.html:45
msgid "Search Changelog"
msgstr ""

#. type: Content of: <html><body><div><div><form>
#: sedout/rtree.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr ""

#. type: Content of: <html><body><script>
#: sedout/rtree.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( "
"w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ "
"w.style.display = \"block\"; } } function toggle_search() { var w = "
"document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ "
"w.style.display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function "
"div_off(nm){document.getElementById(nm).style.display=\"none\";} "
"window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the "
"Search feature if we are not operating from CGI, since */ /* Search is "
"accomplished using CGI and will not work without it. */ if( !location.origin "
"|| !location.origin.match || !location.origin.match(/http/) ){ "
"document.getElementById(\"search_menubutton\").style.display = \"none\"; } "
"/* Used by the Hide/Show button beside syntax diagrams, to toggle the */ "
"function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = "
"document.getElementById(btn); if( x.style.display!='none' ){ x.style.display "
"= 'none'; b.innerHTML='show'; }else{ x.style.display = ''; "
"b.innerHTML='hide'; } return false; } var antiRobot = 0; function "
"antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = "
"document.getElementById(\"mtimelink\"); if(j && "
"j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } "
"function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot "
"|= 2; antiRobotGo(); document.body.onmousedown=null; } "
"document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); "
"document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; "
"antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"
msgstr ""

#. type: Content of: <html><body><div><div><div>
#: sedout/rtree.html:124
msgid ""
"<a onclick=\"toggle_toc()\"> <span class=\"fancy_toc_mark\" "
"id=\"toc_mk\">&#x25ba;</span> Table Of Contents </a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:128
msgid "<a href=\"#overview\">1. Overview</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:129
msgid "<a href=\"#compiling_the_r_tree_module\">2. Compiling The R*Tree Module</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:130
msgid "<a href=\"#using_the_r_tree_module\">3. Using the R*Tree Module</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:131
msgid "<a href=\"#creating_an_r_tree_index\">3.1. Creating An R*Tree Index</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:132
msgid "<a href=\"#column_naming_details\">3.1.1. Column naming details</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:133
msgid "<a href=\"#populating_an_r_tree_index\">3.2. Populating An R*Tree Index</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:134
msgid "<a href=\"#querying_an_r_tree_index\">3.3. Querying An R*Tree Index</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:135
msgid "<a href=\"#roundoff_error\">3.4. Roundoff Error</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:136
msgid ""
"<a href=\"#reading_and_writing_at_the_same_time\">3.5. Reading And Writing "
"At The Same Time</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:137
msgid "<a href=\"#using_r_trees_effectively\">4. Using R*Trees Effectively</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:138
msgid "<a href=\"#auxiliary_columns\">4.1. Auxiliary Columns</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:139
msgid "<a href=\"#limitations\">4.1.1. Limitations</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:140
msgid "<a href=\"#integer_valued_r_trees\">5. Integer-Valued R-Trees</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:141
msgid "<a href=\"#custom_r_tree_queries\">6. Custom R-Tree Queries</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:142
msgid "<a href=\"#the_legacy_xgeom_callback\">6.1. The Legacy xGeom Callback</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:143
msgid ""
"<a href=\"#the_new_xqueryfunc_callback\">6.2. The New xQueryFunc "
"Callback</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:144
msgid ""
"<a href=\"#additional_considerations_for_custom_queries\">6.3. Additional "
"Considerations for Custom Queries</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:145
msgid "<a href=\"#implementation_details\">7. Implementation Details</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:146
msgid "<a href=\"#shadow_tables\">7.1. Shadow Tables</a>"
msgstr ""

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/rtree.html:147
msgid ""
"<a "
"href=\"#integrity_check_using_the_rtreecheck_sql_function\">7.2. Integrity "
"Check using the rtreecheck() SQL function</a>"
msgstr ""

#. type: Content of: <html><body><div><div><script>
#: sedout/rtree.html:151
msgid ""
"function toggle_toc(){ var sub = document.getElementById(\"toc_sub\")  var "
"mk = document.getElementById(\"toc_mk\")  if( sub.style.display!=\"block\" "
"){ sub.style.display = \"block\"; mk.innerHTML = \"&#x25bc;\"; } else { "
"sub.style.display = \"none\"; mk.innerHTML = \"&#x25ba;\"; } }"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:168
msgid "<span>1. </span>Overview"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:171
msgid ""
"An <a href=\"http://en.wikipedia.org/wiki/R-tree\">R-Tree</a> is a special "
"index that is designed for doing range queries.  R-Trees are most commonly "
"used in geospatial systems where each entry is a rectangle with minimum and "
"maximum X and Y coordinates.  Given a query rectangle, an R-Tree is able to "
"quickly find all entries that are contained within the query rectangle or "
"which overlap the query rectangle.  This idea is easily extended to three "
"dimensions for use in CAD systems.  R-Trees also find use in time-domain "
"range look-ups.  For example, suppose a database records the starting and "
"ending times for a large number of events.  A R-Tree is able to quickly find "
"all events that were active at any time during a given time interval, or all "
"events that started during a particular time interval, or all events that "
"both started and ended within a given time interval.  And so forth."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:187
msgid ""
"The R-Tree concept originated with <a "
"href=\"https://link.springer.com/referenceworkentry/10.1007/978-0-387-35973-1_1151\">Toni "
"Guttman</a>: <em>R-Trees: A Dynamic Index Structure for Spatial "
"Searching</em>, Proc. 1984 ACM SIGMOD International Conference on Management "
"of Data, pp. 47-57.  The implementation found in SQLite is a refinement of "
"Guttman's original idea, commonly called \"R*Trees\", that was described by "
"Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, Bernhard Seeger: "
"<em>The R*-Tree: An Efficient and Robust Access Method for Points and "
"Rectangles.</em> SIGMOD Conference 1990: 322-331."
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:199
msgid "<span>2. </span>Compiling The R*Tree Module"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:202
msgid ""
"The source code to the SQLite R*Tree module is included as part of the <a "
"href=\"amalgamation.html\">amalgamation</a>.  However, depending on "
"configuration options and the particular version of SQLite you are using, it "
"may or may not be enabled by default.  To ensure that the R*Tree module is "
"enabled, simply compile with the <a "
"href=\"compile.html#enable_rtree\">SQLITE_ENABLE_RTREE</a> C-preprocessor "
"macro defined.  With many compilers, this is accomplished by adding the "
"option \"-DSQLITE_ENABLE_RTREE=1\" to the compiler command-line."
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:212
msgid "<span>3. </span>Using the R*Tree Module"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:215
msgid ""
"The SQLite R*Tree module is implemented as a <a "
"href=\"c3ref/create_module.html\">virtual table</a>.  Each R*Tree index is a "
"virtual table with an odd number of columns between 3 and 11.  The first "
"column is always a 64-bit signed integer primary key.  The other columns are "
"pairs, one pair per dimension, containing the minimum and maximum values for "
"that dimension, respectively.  A 1-dimensional R*Tree thus has 3 columns.  A "
"2-dimensional R*Tree has 5 columns.  A 3-dimensional R*Tree has 7 columns.  "
"A 4-dimensional R*Tree has 9 columns.  And a 5-dimensional R*Tree has 11 "
"columns.  The SQLite R*Tree implementation does not support R*Trees wider "
"than 5 dimensions."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:230
msgid ""
"The first column of an SQLite R*Tree is similar to an integer primary key "
"column of a normal SQLite table. It may only store a 64-bit signed integer "
"value. Inserting a NULL value into this column causes SQLite to "
"automatically generate a new unique primary key value. If an attempt is made "
"to insert any other non-integer value into this column, the r-tree module "
"silently converts it to an integer before writing it into the database."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:238
msgid ""
"The min/max-value pair columns are stored as 32-bit floating point values "
"for \"rtree\" virtual tables or as 32-bit signed integers in \"rtree_i32\" "
"virtual tables.  Unlike regular SQLite tables which can store data in a "
"variety of datatypes and formats, the R*Tree rigidly enforce these storage "
"types.  If any other type of value is inserted into such a column, the "
"r-tree module silently converts it to the required type before writing the "
"new record to the database."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:246
msgid "<span>3.1. </span>Creating An R*Tree Index"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:249
msgid "A new R*Tree index is created as follows:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:252
#, no-wrap
msgid ""
"CREATE VIRTUAL TABLE <em>&lt;name&gt;</em> USING "
"rtree(<em>&lt;column-names&gt;</em>);\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:256
msgid ""
"The <em>&lt;name&gt;</em> is the name your application chooses for the "
"R*Tree index and <em>&lt;column-names&gt;</em> is a comma separated list of "
"between 3 and 11 columns.  The virtual &lt;name&gt; table creates three <a "
"href=\"vtab.html#xshadowname\">shadow tables</a> to actually store its "
"content.  The names of these shadow tables are:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:263
#, no-wrap
msgid "<em>&lt;name&gt;</em><strong>_node</strong>"
msgstr ""

#. type: Content of: <html><body><div><div><pre><br>
#: sedout/rtree.html:264
msgid "<em>&lt;name&gt;</em><strong>_rowid</strong>"
msgstr ""

#. type: Content of: <html><body><div><div><pre><br><br>
#: sedout/rtree.html:265
msgid "<em>&lt;name&gt;</em><strong>_parent</strong>"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:270
msgid ""
"The shadow tables are ordinary SQLite data tables.  You can query them "
"directly if you like, though this unlikely to reveal anything particularly "
"useful.  And you can <a href=\"lang_update.html\">UPDATE</a>, <a "
"href=\"lang_delete.html\">DELETE</a>, <a "
"href=\"lang_insert.html\">INSERT</a> or even <a "
"href=\"lang_droptable.html\">DROP</a> the shadow tables, though doing so "
"will corrupt your R*Tree index.  So it is best to simply ignore the shadow "
"tables.  Recognize that they hold your R*Tree index information and let it "
"go as that."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:280
msgid ""
"As an example, consider creating a two-dimensional R*Tree index for use in "
"spatial queries:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:284
#, no-wrap
msgid ""
"CREATE VIRTUAL TABLE demo_index USING rtree(\n"
"   id,              -- Integer primary key\n"
"   minX, maxX,      -- Minimum and maximum X coordinate\n"
"   minY, maxY       -- Minimum and maximum Y coordinate\n"
");\n"
msgstr ""

#. type: Content of: <html><body><div><h3>
#: sedout/rtree.html:292
msgid "<span>3.1.1. </span>Column naming details"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:295
msgid ""
"In the argments to \"rtree\" in the CREATE VIRTUAL TABLE statement, the "
"names of the columns are taken from the first token of each argument.  All "
"subsequent tokens within each argument are silently ignored.  This means, "
"for example, that if you try to give a column a <a "
"href=\"datatype3.html#affinity\">type affinity</a> or add a constraint such "
"as UNIQUE or NOT NULL or DEFAULT to a column, those extra tokens are "
"accepted as valid, but they do not change the behavior of the rtree.  In an "
"RTREE virtual table, the first column always has a <a "
"href=\"datatype3.html#affinity\">type affinity</a> of INTEGER and all other "
"data columns have a <a href=\"datatype3.html#affinity\">type affinity</a> of "
"REAL.  In an RTREE_I32 virtual table, all columns have type affinity of "
"INTEGER."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:308
msgid ""
"Recommended practice is to omit any extra tokens in the rtree "
"specification.  Let each argument to \"rtree\" be a single ordinary label "
"that is the name of the corresponding column, and omit all other tokens from "
"the argument list."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:312
msgid "<span>3.2. </span>Populating An R*Tree Index"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:315
msgid ""
"The usual <a href=\"lang_insert.html\">INSERT</a>, <a "
"href=\"lang_update.html\">UPDATE</a>, and <a "
"href=\"lang_delete.html\">DELETE</a> commands work on an R*Tree index just "
"like on regular tables.  So to insert some data into our sample R*Tree "
"index, we can do something like this:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:320
#, no-wrap
msgid ""
"INSERT INTO demo_index VALUES\n"
"  (28215, -80.781227, -80.604706, 35.208813, 35.297367),\n"
"  (28216, -80.957283, -80.840599, 35.235920, 35.367825),\n"
"  (28217, -80.960869, -80.869431, 35.133682, 35.208233),\n"
"  (28226, -80.878983, -80.778275, 35.060287, 35.154446),\n"
"  (28227, -80.745544, -80.555382, 35.130215, 35.236916),\n"
"  (28244, -80.844208, -80.841988, 35.223728, 35.225471),\n"
"  (28262, -80.809074, -80.682938, 35.276207, 35.377747),\n"
"  (28269, -80.851471, -80.735718, 35.272560, 35.407925),\n"
"  (28270, -80.794983, -80.728966, 35.059872, 35.161823),\n"
"  (28273, -80.994766, -80.875259, 35.074734, 35.172836),\n"
"  (28277, -80.876793, -80.767586, 35.001709, 35.101063),\n"
"  (28278, -81.058029, -80.956375, 35.044701, 35.223812),\n"
"  (28280, -80.844208, -80.841972, 35.225468, 35.227203),\n"
"  (28282, -80.846382, -80.844193, 35.223972, 35.225655);\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:339
msgid ""
"The entries above are bounding boxes (longitude and latitude) for 14 "
"zipcodes near Charlotte, NC.  A real database would have many thousands, "
"millions, or billions of such entries, but this small 14-row sample will be "
"sufficient to illustrate the ideas."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:345
msgid "<span>3.3. </span>Querying An R*Tree Index"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:348
msgid ""
"Any valid query will work against an R*Tree index.  The R*Tree "
"implementation just makes some kinds of queries especially efficient.  "
"Queries against the primary key are efficient:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:353
#, no-wrap
msgid "SELECT * FROM demo_index WHERE id=28269;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:358
msgid ""
"Of course, an ordinary SQLite table will also do a query against its integer "
"primary key efficiently, so the previous is not important.  The big reason "
"for using an R*Tree is so that you can efficiently do range queries against "
"the coordinate ranges.  For example, the main office of the SQLite project "
"is located at 35.37785, -80.77470.  To find which zipcodes might service "
"that office, one could right:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:367
#, no-wrap
msgid ""
"SELECT id FROM demo_index\n"
" WHERE minX&lt;=-80.77470 AND maxX&gt;=-80.77470\n"
"   AND minY&lt;=35.37785  AND maxY&gt;=35.37785;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:374
msgid ""
"The query above will quickly locate all zipcodes that contain the SQLite "
"main office in their bounding box, even if the R*Tree contains many "
"entries.  The previous is an example of a \"contained-within\" query.  The "
"R*Tree also supports \"overlapping\" queries.  For example, to find all "
"zipcode bounding boxes that overlap with the 28269 zipcode:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:382
#, no-wrap
msgid ""
"SELECT A.id FROM demo_index AS A, demo_index AS B\n"
" WHERE A.maxX&gt;=B.minX AND A.minX&lt;=B.maxX\n"
"   AND A.maxY&gt;=B.minY AND A.minY&lt;=B.maxY\n"
"   AND B.id=28269;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:390
msgid ""
"This second query will find both 28269 entry (since every bounding box "
"overlaps with itself) and also other zipcode that is close enough to 28269 "
"that their bounding boxes overlap."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:396
msgid ""
"Note that it is not necessary for all coordinates in an R*Tree index to be "
"constrained in order for the index search to be efficient.  One might, for "
"example, want to query all objects that overlap with the 35th parallel:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:402 sedout/rtree.html:450
#, no-wrap
msgid ""
"SELECT id FROM demo_index\n"
" WHERE maxY&gt;=35.0  AND minY&lt;=35.0;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:408
msgid ""
"But, generally speaking, the more constraints that the R*Tree module has to "
"work with, and the smaller the bounding box, the faster the results will "
"come back."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:413
msgid "<span>3.4. </span>Roundoff Error"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:416
msgid ""
"By default, coordinates are stored in an R*Tree using 32-bit floating point "
"values.  When a coordinate cannot be exactly represented by a 32-bit "
"floating point number, the lower-bound coordinates are rounded down and the "
"upper-bound coordinates are rounded up.  Thus, bounding boxes might be "
"slightly larger than specified, but will never be any smaller.  This is "
"exactly what is desired for doing the more common \"overlapping\" queries "
"where the application wants to find every entry in the R*Tree that overlaps "
"a query bounding box.  Rounding the entry bounding boxes outward might cause "
"a few extra entries to appears in an overlapping query if the edge of the "
"entry bounding box corresponds to an edge of the query bounding box.  But "
"the overlapping query will never miss a valid table entry."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:428
msgid ""
"However, for a \"contained-within\" style query, rounding the bounding boxes "
"outward might cause some entries to be excluded from the result set if the "
"edge of the entry bounding box corresponds to the edge of the query bounding "
"box.  To guard against this, applications should expand their "
"contained-within query boxes slightly (by 0.000012%) by rounding down the "
"lower coordinates and rounding up the top coordinates, in each dimension.  "
"<a name=\"readwrite\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:437
msgid "<span>3.5. </span>Reading And Writing At The Same Time"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:440
msgid ""
"It is the nature of the Guttman R-Tree algorithm that any write might "
"radically restructure the tree, and in the process change the scan order of "
"the nodes.  For this reason, it is not generally possible to modify the "
"R-Tree in the middle of a query of the R-Tree.  Attempts to do so will fail "
"with a <a href=\"rescode.html#locked\">SQLITE_LOCKED</a> \"database table is "
"locked\" error."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:447
msgid ""
"So, for example, suppose an application runs one query against an R-Tree "
"like this:"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:455
msgid ""
"Then for each \"id\" value returned, suppose the application creates an "
"UPDATE statement like the following and binds the \"id\" value returned "
"against the \"?1\" parameter:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:459
#, no-wrap
msgid "UPDATE demo_index SET maxY=maxY+0.5 WHERE id=?1;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:463
msgid ""
"Then the UPDATE might fail with an SQLITE_LOCKED error.  The reason is that "
"the initial query has not run to completion.  It is remembering its place in "
"the middle of a scan of the R-Tree.  So an update to the R-Tree cannot be "
"tolerated as this would disrupt the scan."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:469
msgid ""
"This is a limitation of the R-Tree extension only.  Ordinary tables in "
"SQLite are able to read and write at the same time.  Other virtual tables "
"might (or might not) also that capability.  And R-Tree can appear to read "
"and write at the same time in some circumstances, if it can figure out how "
"to reliably run the query to completion before starting the update.  But you "
"shouldn't count on that for every query.  Generally speaking, it is best to "
"avoid running queries and updates to the same R-Tree at the same time."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:479
msgid ""
"If you really need to update an R-Tree based on complex queries against the "
"same R-Tree, it is best to run the complex queries first and store the "
"results in a temporary table, then update the R-Tree based on the values "
"stored in the temporary table."
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:484
msgid "<span>4. </span>Using R*Trees Effectively"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:487
msgid ""
"For SQLite versions prior to 3.24.0 (2018-06-04), the only information that "
"an R*Tree index stores about an object is its integer ID and its bounding "
"box.  Additional information needs to be stored in separate tables and "
"related to the R*Tree index using the primary key.  For the example above, "
"one might create an auxiliary table as follows:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:495
#, no-wrap
msgid ""
"CREATE TABLE demo_data(\n"
"  id INTEGER PRIMARY KEY,  -- primary key\n"
"  objname TEXT,            -- name of the object\n"
"  objtype TEXT,            -- object type\n"
"  boundary BLOB            -- detailed boundary of object\n"
");\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:504
msgid ""
"In this example, the demo_data.boundary field is intended to hold some kind "
"of binary representation of the precise boundaries of the object.  The "
"R*Tree index only holds an axis-aligned rectangular boundary for the "
"object.  The R*Tree boundary is just an approximation of the true object "
"boundary.  So what typically happens is that the R*Tree index is used to "
"narrow a search down to a list of candidate objects and then more detailed "
"and expensive computations are done on each candidate to find if the "
"candidate truly meets the search criteria."
msgstr ""

#. type: Content of: <html><body><div><blockquote><p>
#: sedout/rtree.html:515
msgid ""
"<strong>Key Point:</strong> An R*Tree index does not normally provide the "
"exact answer but merely reduces the set of potential answers from millions "
"to dozens."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:521
msgid ""
"Suppose the demo_data.boundary field holds some proprietary data description "
"of a complex two-dimensional boundary for a zipcode and suppose that the "
"application has used the <a "
"href=\"c3ref/create_function.html\">sqlite3_create_function()</a> interface "
"to created an application-defined function "
"\"contained_in(boundary,lat,long)\" that accepts the demo_data.boundary "
"object and a latitute and longitude and returns return true or false if the "
"lat/long is contained within the boundary.  One may assume that "
"\"contained_in()\" is a relatively slow functions that we do not want to "
"invoke too frequently.  Then an efficient way to find the specific ZIP code "
"for the main SQLite office would be to run a query like this:"
msgstr ""

#. type: Content of: <html><body><div>
#: sedout/rtree.html:534
msgid "<a name=\"diquery\"></a>"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:535
#, no-wrap
msgid ""
"SELECT objname FROM demo_data, demo_index\n"
" WHERE demo_data.id=demo_index.id\n"
"   AND contained_in(demo_data.boundary, 35.37785, -80.77470)\n"
"   AND minX&lt;=-80.77470 AND maxX&gt;=-80.77470\n"
"   AND minY&lt;=35.37785  AND maxY&gt;=35.37785;\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:542
msgid ""
"Notice how the query above works: The R*Tree index runs in the outer loop to "
"find entries that contain the SQLite main office in their boundary box.  For "
"each row found, SQLite looks up the corresponding entry in the demo_data "
"table.  It then uses the boundary field from the demo_data table as a "
"parameter to the contained_in()  function and if that function returns true, "
"then we know the sought after coordinate is in that ZIP code boundary."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:551
msgid ""
"One would get the same answer without the use of the R*Tree index using the "
"following simpler query:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:554
#, no-wrap
msgid ""
"SELECT objname FROM demo_data\n"
" WHERE contained_in(demo_data.boundary, 35.37785, -80.77470);\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:558
msgid ""
"The problem with this latter query is that it must apply the contained_in() "
"function to all entries in the demo_data table.  The use of the R*Tree in "
"the penultimate query reduces the number of calls to contained_in() function "
"to a small subset of the entire table.  The R*Tree index did not find the "
"exact answer itself, it merely limited the search space."
msgstr ""

#. type: Content of: <html><body><div>
#: sedout/rtree.html:565
msgid "<a name=\"auxcol\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:567
msgid "<span>4.1. </span>Auxiliary Columns"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:570
msgid ""
"Beginning with SQLite version 3.24.0 (2018-06-04), r-tree tables can have "
"auxiliary columns that store arbitrary data.  Auxiliary columns can be used "
"in place of secondary tables such as \"demo_data\"."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:576
msgid ""
"Auxiliary columns are marked with a \"+\" symbol before the column name.  "
"Auxiliary columns must come after all of the coordinate boundary columns.  "
"An RTREE table can have no more than 100 columns total.  In other words, the "
"count of columns including the integer primary key column, the coordinate "
"boundary columns, and all auxiliary columns must be 100 or less.  The "
"following example shows an r-tree table with auxiliary columns that is "
"equivalent to the two tables \"demo_index\" and \"demo_data\" above:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:584
#, no-wrap
msgid ""
"CREATE VIRTUAL TABLE demo_index2 USING rtree(\n"
"   id,              -- Integer primary key\n"
"   minX, maxX,      -- Minimum and maximum X coordinate\n"
"   minY, maxY,      -- Minimum and maximum Y coordinate\n"
"   +objname TEXT,   -- name of the object\n"
"   +objtype TEXT,   -- object type\n"
"   +boundary BLOB   -- detailed boundary of object\n"
");\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:595
msgid ""
"By combining location data and related information into the same table, "
"auxiliary columns can provide a cleaner model and reduce the need to joins.  "
"For example, the earlier <a href=\"#diquery\">join between demo_index and "
"demo_data</a> can now be written as a simple query, like this:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:602
#, no-wrap
msgid ""
"SELECT objname FROM demo_index2\n"
" WHERE contained_in(boundary, 35.37785, -80.77470)\n"
"   AND minX&lt;=-80.77470 AND maxX&gt;=-80.77470\n"
"   AND minY&lt;=35.37785  AND maxY&gt;=35.37785;\n"
msgstr ""

#. type: Content of: <html><body><div><h3>
#: sedout/rtree.html:608
msgid "<span>4.1.1. </span>Limitations"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:611
msgid ""
"For auxiliary columns, only the name of the column matters.  The <a "
"href=\"datatype3.html#affinity\">type affinity</a> is ignored.  Constraints "
"such as NOT NULL, UNIQUE, REFERENCES, or CHECK are also ignored.  However, "
"future versions of SQLite might start paying attention to the type affinity "
"and constraints, so users of auxiliary columns are advised to leave both "
"blank, to avoid future compatibility problems.  <a name=\"intrtree\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:621
msgid "<span>5. </span>Integer-Valued R-Trees"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:624
msgid ""
"The default virtual table (\"rtree\") stores coordinates as single-precision "
"(4-byte) floating point numbers.  If integer coordinates are desired, "
"declare the table using \"rtree_i32\" instead:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:628
#, no-wrap
msgid "CREATE VIRTUAL TABLE intrtree USING rtree_i32(id,x0,x1,y0,y1,z0,z1);\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:632
msgid ""
"An rtree_i32 stores coordinates as 32-bit signed integers.  Even though it "
"stores values using integer, the rtree_i32 virtual table still uses floating "
"point computations internally as part of the r-tree algorithm.  <a "
"name=\"customquery\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:639
msgid "<span>6. </span>Custom R-Tree Queries"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:641
msgid ""
"By using standard SQL expressions in the WHERE clause of a SELECT query, a "
"programmer can query for all R*Tree entries that intersect with or are "
"contained within a particular bounding-box.  Custom R*Tree queries, using "
"the MATCH operator in the WHERE clause of a SELECT, allow the programmer to "
"query for the set of R*Tree entries that intersect any arbitrary region or "
"shape, not just a box.  This capability is useful, for example, in computing "
"the subset of objects in the R*Tree that are visible from a camera "
"positioned in 3-D space."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:651
msgid ""
"Regions for custom R*Tree queries are defined by R*Tree geometry callbacks "
"implemented by the application and registered with SQLite via a call to one "
"of the following two APIs:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:655
#, no-wrap
msgid ""
"int sqlite3_rtree_query_callback(\n"
"  sqlite3 *db,\n"
"  const char *zQueryFunc,\n"
"  int (*xQueryFunc)(sqlite3_rtree_query_info*),\n"
"  void *pContext,\n"
"  void (*xDestructor)(void*)\n"
");\n"
"int sqlite3_rtree_geometry_callback(\n"
"  sqlite3 *db,\n"
"  const char *zGeom,\n"
"  int (*xGeom)(sqlite3_rtree_geometry *, int nCoord, double *aCoord, int "
"*pRes),\n"
"  void *pContext\n"
");\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:670
msgid ""
"The sqlite3_rtree_query_callback() became available with SQLite <a "
"href=\"releaselog/3_8_5.html\">version 3.8.5</a> (2014-06-04) and is the "
"preferred interface.  The sqlite3_rtree_geometry_callback() is an older and "
"less flexible interface that is supported for backwards compatibility."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:675
msgid ""
"A call to one of the above APIs creates a new SQL function named by the "
"second parameter (zQueryFunc or zGeom).  When that SQL function appears on "
"the right-hand side of the MATCH operator and the left-hand side of the "
"MATCH operator is any column in the R*Tree virtual table, then the callback "
"defined by the third argument (xQueryFunc or xGeom) is invoked to determine "
"if a particular object or subtree overlaps the desired region."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:682
msgid ""
"For example, a query like the following might be used to find all R*Tree "
"entries that overlap with a circle centered a 45.3,22.9 with a radius of "
"5.0:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:686
#, no-wrap
msgid "SELECT id FROM demo_index WHERE id MATCH circle(45.3, 22.9, 5.0)\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:689
msgid ""
"The SQL syntax for custom queries is the same regardless of which interface, "
"sqlite3_rtree_geometry_callback() or sqlite3_rtree_query_callback(), is used "
"to register the SQL function.  However, the newer query-style callbacks give "
"the application greater control over how the query proceeds."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:694
msgid "<span>6.1. </span>The Legacy xGeom Callback"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:696
msgid ""
"The legacy xGeom callback is invoked with four arguments.  The first "
"argument is a pointer to an sqlite3_rtree_geometry structure which provides "
"information about how the SQL function was invoked.  The second argument is "
"the number of coordinates in each r-tree entry, and is always the same for "
"any given R*Tree.  The number of coordinates is 2 for a 1-dimensional "
"R*Tree, 4 for a 2-dimensional R*Tree, 6 for a 3-dimensional R*Tree, and so "
"forth.  The third argument, aCoord[], is an array of nCoord coordinates that "
"defines a bounding box to be tested.  The last argument is a pointer into "
"which the callback result should be written.  The result is zero if the "
"bounding-box defined by aCoord[] is completely outside the region defined by "
"the xGeom callback and the result is non-zero if the bounding-box is inside "
"or overlaps with the xGeom region.  The xGeom callback should normally "
"return SQLITE_OK.  If xGeom returns anything other than SQLITE_OK, then the "
"r-tree query will abort with an error."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:711
msgid ""
"The sqlite3_rtree_geometry structure that the first argument to the xGeom "
"callback points to has a structure shown below.  The exact same "
"sqlite3_rtree_geometry structure is used for every callback for same MATCH "
"operator in the same query.  The contents of the sqlite3_rtree_geometry "
"structure are initialized by SQLite but are not subsequently modified.  The "
"callback is free to make changes to the pUser and xDelUser elements of the "
"structure if desired."
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:720
#, no-wrap
msgid ""
"typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;\n"
"struct sqlite3_rtree_geometry {\n"
"  void *pContext;                 /* Copy of pContext passed to s_r_g_c() "
"*/\n"
"  int nParam;                     /* Size of array aParam */\n"
"  double *aParam;                 /* Parameters passed to SQL geom function "
"*/\n"
"  void *pUser;                    /* Callback implementation user data */\n"
"  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */\n"
"};\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:730
msgid ""
"The pContext member of the sqlite3_rtree_geometry structure is always set to "
"a copy of the pContext argument passed to sqlite3_rtree_geometry_callback() "
"when the callback is registered. The aParam[] array (size nParam) contains "
"the parameter values passed to the SQL function on the right-hand side of "
"the MATCH operator.  In the example \"circle\" query above, nParam would be "
"set to 3 and the aParam[] array would contain the three values 45.3, 22.9 "
"and 5.0."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:738
msgid ""
"The pUser and xDelUser members of the sqlite3_rtree_geometry structure are "
"initially set to NULL. The pUser variable may be set by the callback "
"implementation to any arbitrary value that may be useful to subsequent "
"invocations of the callback within the same query (for example, a pointer to "
"a complicated data structure used to test for region intersection).  If the "
"xDelUser variable is set to a non-NULL value, then after the query has "
"finished running SQLite automatically invokes it with the value of the pUser "
"variable as the only argument. In other words, xDelUser may be set to a "
"destructor function for the pUser value."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:748
msgid ""
"The xGeom callback always does a depth-first search of the r-tree.  <a "
"name=\"xquery\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:752
msgid "<span>6.2. </span>The New xQueryFunc Callback"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:754
msgid ""
"The newer xQueryFunc callback receives more information from the r-tree "
"query engine on each call, and it sends more information back to the query "
"engine before it returns.  To help keep the interface manageable, the "
"xQueryFunc callback sends and receives information from the query engine as "
"fields in the sqlite3_rtree_query_info structure:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:761
#, no-wrap
msgid ""
"struct sqlite3_rtree_query_info {\n"
"  void *pContext;                   /* pContext from when function "
"registered */\n"
"  int nParam;                       /* Number of function parameters */\n"
"  sqlite3_rtree_dbl *aParam;        /* value of function parameters */\n"
"  void *pUser;                      /* callback can use this, if desired "
"*/\n"
"  void (*xDelUser)(void*);          /* function to free pUser */\n"
"  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check "
"*/\n"
"  unsigned int *anQueue;            /* Number of pending entries in the "
"queue */\n"
"  int nCoord;                       /* Number of coordinates */\n"
"  int iLevel;                       /* Level of current node or entry */\n"
"  int mxLevel;                      /* The largest iLevel value in the tree "
"*/\n"
"  sqlite3_int64 iRowid;             /* Rowid for current entry */\n"
"  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */\n"
"  int eParentWithin;                /* Visibility of parent node */\n"
"  int eWithin;                      /* OUT: Visiblity */\n"
"  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */\n"
"  /* The following fields are only available in 3.8.11 and later */\n"
"  sqlite3_value **apSqlParam;       /* Original SQL values of parameters "
"*/\n"
"};\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:782
msgid ""
"The first five fields of the sqlite3_rtree_query_info structure are "
"identical to the sqlite3_rtree_geometry structure, and have exactly the same "
"meaning.  The sqlite3_rtree_query_info structure also contains nCoord and "
"aCoord fields which have the same meaning as the parameter of the same name "
"in the xGeom callback."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:787
msgid ""
"The xQueryFunc must set the eWithin field of sqlite3_rtree_query_info to one "
"of the values NOT_WITHIN, PARTLY_WITHIN, or FULLY_WITHIN depending on "
"whether or not the bounding box defined by aCoord[] is completely outside "
"the region, overlaps the region, or is completely inside the region, "
"respectively.  In addition, the xQueryFunc must set the rScore field to a "
"non-negative value that indicates the order in which subtrees and entries of "
"the query should be analyzed and returned.  Smaller scores are processed "
"first."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:795
msgid ""
"As its name implies, an R*Tree is organized as a tree.  Each node of the "
"tree is a bounding box.  The root of the tree is a bounding box that "
"encapsulates all elements of the tree.  Beneath the root are a number of "
"subtrees (typically 20 or more) each with their own smaller bounding boxes "
"and each containing some subset of the R*Tree entries.  The subtrees may "
"have sub-subtrees, and so forth until finally one reaches the leaves of the "
"tree which are the actual R*Tree entries."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:803
msgid ""
"An R*Tree query is initialized by making the root node the only entry in a "
"priority queue sorted by rScore.  The query proceeds by extracting the entry "
"from the priority queue that has the lowest score.  If that entry is a leaf "
"(meaning that it is an actual R*Tree entry and not a subtree) then that "
"entry is returned as one row of the query result.  If the extracted priority "
"queue entry is a node (a subtree), then the next child of that node is "
"passed to the xQueryFunc callback.  If the node has more children then it is "
"returned to the priority queue.  Otherwise it is discarded. Those "
"subelements for which the xQueryFunc callback sets eWithin to PARTLY_WITHIN "
"or FULLY_WITHIN are added to the priority queue using the score supplied by "
"the callback.  Subelements that return NOT_WITHIN are discarded.  The query "
"runs until the priority queue is empty."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:818
msgid ""
"Every leaf entry and node (subtree) within the R*Tree has an integer "
"\"level\".  The leaves have a level of 0.  The first containing subtree of "
"the leaves has a level of 1.  The root of the R*Tree has the largest level "
"value.  The mxLevel entry in the sqlite3_rtree_query_info structure is the "
"level value for the root of the R*Tree.  The iLevel entry in "
"sqlite3_rtree_query_info gives the level for the object being interrogated."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:825
msgid ""
"Most R*Tree queries use a depth-first search.  This is accomplished by "
"setting the rScore equal to iLevel.  A depth-first search is usually "
"preferred since it minimizes the number of elements in the priority queue, "
"which reduces memory requirements and speeds processing.  However, some "
"application may prefer a breadth-first search, which can be accomplished by "
"setting rScore to mxLevel-iLevel.  By creating more complex formulas for "
"rScore, applications can exercise detailed control over the order in which "
"subtree are searched and leaf R*Tree entries are returned.  For example, in "
"an application with many millions of R*Tree entries, the rScore might be "
"arranged so that the largest or most significant entries are returned first, "
"allowing the application to display the most important information quickly, "
"and filling in smaller and less important details as they become available."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:838
msgid ""
"Other information fields of the sqlite3_rtree_query_info structure are "
"available for use by the xQueryFunc callback, if desired.  The iRowid field "
"is the rowid (the first of the 3 to 11 columns in the R*Tree) for the "
"element being considered.  iRowid is only valid for leaves.  The "
"eParentWithin and rParentScore values are copies of the eWithin and rScore "
"values from the containing subtree of the current row.  The anQueue field is "
"an array of mxLevel+1 unsigned integers that tell the current number of "
"elements in the priority queue at each level."
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:847
msgid "<span>6.3. </span>Additional Considerations for Custom Queries"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:850
msgid ""
"The MATCH operator of a custom R*Tree query function must be a top-level "
"AND-connected term of the WHERE clause, or else it will not be usable by the "
"R*Tree query optimizer and the query will not be runnable.  If the MATCH "
"operator is connected to other terms of the WHERE clause via an OR operator, "
"for example, the query will fail with an error."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:857
msgid ""
"Two or more MATCH operators are allowed in the same WHERE clause, as long as "
"they are connected by AND operators.  However, the R*Tree query engine only "
"contains a single priority queue.  The priority assigned to each node in the "
"search is the lowest priority returned by any of the MATCH operators."
msgstr ""

#. type: Content of: <html><body><div><h1>
#: sedout/rtree.html:863
msgid "<span>7. </span>Implementation Details"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:866
msgid ""
"The following sections describe some low-level details of the R*Tree "
"implementation, that might be useful for trouble-shooting or performance "
"analysis.  <a name=\"xshadow\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:871
msgid "<span>7.1. </span>Shadow Tables"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:873
msgid ""
"The content of an R*Tree index is actually stored in three ordinary SQLite "
"tables with names derived from the name of the R*Tree.  These three tables "
"are called \"<a href=\"vtab.html#xshadowname\">shadow tables</a>\".  This is "
"their schema:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:877
#, no-wrap
msgid ""
"CREATE TABLE %_node(nodeno INTEGER PRIMARY KEY, data)\n"
"CREATE TABLE %_parent(nodeno INTEGER PRIMARY KEY, parentnode)\n"
"CREATE TABLE %_rowid(rowid INTEGER PRIMARY KEY, nodeno)\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:882
msgid ""
"The \"%\" in the name of each shadow table is replaced by the name of the "
"R*Tree virtual table.  So, if the name of the R*Tree table is \"xyz\" then "
"the three shadow tables would be \"xyz_node\", \"xyz_parent\", and "
"\"xyz_rowid\"."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:886
msgid ""
"There is one entry in the %_node table for each R*Tree node.  An R*Tree node "
"consists of one or more entries that are proximate to one another.  The "
"nodes of an R*Tree for a tree.  All nodes other than the root have an entry "
"in the %_parent shadow table that identifies the parent node.  Each entry in "
"an R*Tree has a rowid.  The %_rowid shadow table maps entry rowids to the "
"node that contains that entry."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:893
msgid ""
"Extra columns appended to the %_rowid table hold the content of <a "
"href=\"rtree.html#auxcol\">auxiliary columns</a>.  The names of these extra "
"%_rowid columns are probably not the same as the actual auxiliary column "
"names.  <a name=\"rtreecheck\"></a>"
msgstr ""

#. type: Content of: <html><body><div><h2>
#: sedout/rtree.html:900
msgid "<span>7.2. </span>Integrity Check using the rtreecheck() SQL function"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:902
msgid ""
"The scalar SQL function rtreecheck(R) or rtreecheck(S,R) runs an integrity "
"check on the rtree table named R contained within database S.  The function "
"returns a human-language description of any problems found, or the string "
"'ok' if everything is ok.  Running rtreecheck() on an R*Tree virtual table "
"is similar to running <a href=\"pragma.html#pragma_integrity_check\">PRAGMA "
"integrity_check</a> on a database."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:909
msgid ""
"Example: To verify that an R*Tree named \"demo_index\" is well-formed and "
"internally consistent, run:"
msgstr ""

#. type: Content of: <html><body><div><div><pre>
#: sedout/rtree.html:912
#, no-wrap
msgid "SELECT rtreecheck('demo_index');\n"
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/rtree.html:915
msgid "The rtreecheck() function performs the following checks:"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li>
#: sedout/rtree.html:919
msgid "For each cell in the r-tree structure (%_node table), that:"
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><ol><li>
#: sedout/rtree.html:921
msgid "for each dimension, (coord1 &lt;= coord2)."
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><ol><li>
#: sedout/rtree.html:922
msgid ""
"unless the cell is on the root node, that the cell is bounded by the parent "
"cell on the parent node."
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><ol><li>
#: sedout/rtree.html:924
msgid ""
"for leaf nodes, that there is an entry in the %_rowid table corresponding to "
"the cell's rowid value that points to the correct node."
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><ol><li>
#: sedout/rtree.html:927
msgid ""
"for cells on non-leaf nodes, that there is an entry in the %_parent table "
"mapping from the cell's child node to the node that it resides on."
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><p>
#: sedout/rtree.html:932
msgid ""
"That there are the same number of entries in the %_rowid table as there are "
"leaf cells in the r-tree structure, and that there is a leaf cell that "
"corresponds to each entry in the %_rowid table."
msgstr ""

#. type: Content of: <html><body><div><p><ol><li><p>
#: sedout/rtree.html:936
msgid ""
"That there are the same number of entries in the %_parent table as there are "
"non-leaf cells in the r-tree structure, and that there is a non-leaf cell "
"that corresponds to each entry in the %_parent table."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/rtree.html:941
msgid ""
"<small><i>This page last modified on <a "
"href=\"https://sqlite.org/docsrc/honeypot\" id=\"mtimelink\" "
"data-href=\"https://sqlite.org/docsrc/finfo/pages/rtree.in?m=703d907909\">2023-02-20 "
"00:00:42</a> UTC </i></small>"
msgstr ""
