# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: sqlite-docs-ja 0.0\n"
"POT-Creation-Date: 2023-03-16 09:59+0900\n"
"PO-Revision-Date: 2023-03-21 10:21+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <html><body><div><div><div>
#: sedout/datatype3.html:6 sedout/datatype3.html:121
msgid "Datatypes In SQLite"
msgstr "Datatypes In SQLite"

#. type: Content of: <html><body><div><a>
#: sedout/datatype3.html:11
msgid "<a href=\"index.html\">"
msgstr "<a href=\"index.html\">"

#. type: Attribute 'alt' of: <html><body><div><a><img>
#: sedout/datatype3.html:12
msgid "SQLite"
msgstr "SQLite"

#. type: Content of: <html><body><div><div>
#: sedout/datatype3.html:16
msgid "Small. Fast. Reliable."
msgstr "Small. Fast. Reliable."

#. type: Content of: <html><body><div><div><br>
#: sedout/datatype3.html:16
msgid "Choose any three."
msgstr "Choose any three."

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/datatype3.html:20
msgid "<a href=\"index.html\">Home</a>"
msgstr "<a href=\"index.html\">Home</a>"

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/datatype3.html:21
msgid ""
"<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"
msgstr "<a href=\"javascript:void(0)\" onclick='toggle_div(\"submenu\")'>Menu</a>"

#. type: Content of: <html><body><div><div><ul><li>
#: sedout/datatype3.html:22 sedout/datatype3.html:34
msgid "<a href='about.html'>About</a>"
msgstr "<a href='about.html'>About</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/datatype3.html:23
msgid "<a href=\"docs.html\">Documentation</a>"
msgstr "<a href=\"docs.html\">Documentation</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/datatype3.html:24
msgid "<a href=\"download.html\">Download</a>"
msgstr "<a href=\"download.html\">Download</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li>
#: sedout/datatype3.html:25
msgid "<a href='copyright.html'>License</a>"
msgstr "<a href='copyright.html'>License</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li>
#: sedout/datatype3.html:26
msgid "<a href=\"support.html\">Support</a>"
msgstr "<a href=\"support.html\">Support</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li>
#: sedout/datatype3.html:27
msgid "<a href=\"prosupport.html\">Purchase</a>"
msgstr "<a href=\"prosupport.html\">Purchase</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li><li><li><li><li>
#: sedout/datatype3.html:29
msgid "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"
msgstr "<a href=\"javascript:void(0)\" onclick='toggle_search()'>Search</a>"

#. type: Content of: <html><body><div><div><ul><li><li>
#: sedout/datatype3.html:35
msgid "<a href='docs.html'>Documentation</a>"
msgstr "<a href='docs.html'>Documentation</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li>
#: sedout/datatype3.html:36
msgid "<a href='download.html'>Download</a>"
msgstr "<a href='download.html'>Download</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li>
#: sedout/datatype3.html:37
msgid "<a href='support.html'>Support</a>"
msgstr "<a href='support.html'>Support</a>"

#. type: Content of: <html><body><div><div><ul><li><li><li><li><li>
#: sedout/datatype3.html:38
msgid "<a href='prosupport.html'>Purchase</a>"
msgstr "<a href='prosupport.html'>Purchase</a>"

#. type: Content of: <html><body><div><div><form><select>
#: sedout/datatype3.html:43
msgid "<select name=\"s\" id=\"searchtype\">"
msgstr "<select name=\"s\" id=\"searchtype\">"

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/datatype3.html:44
msgid "Search Documentation"
msgstr "Search Documentation"

#. type: Content of: <html><body><div><div><form><select><option>
#: sedout/datatype3.html:45
msgid "Search Changelog"
msgstr "Search Changelog"

#. type: Content of: <html><body><div><div><form>
#: sedout/datatype3.html:46
msgid ""
"</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> "
"<input type=\"submit\" value=\"Go\"/>"
msgstr "</select> <input type=\"text\" name=\"q\" id=\"searchbox\" value=\"\"/> <input type=\"submit\" value=\"Go\"/>"

#. type: Content of: <html><body><script>
#: sedout/datatype3.html:53
msgid ""
"function toggle_div(nm) { var w = document.getElementById(nm); if( w.style."
"display==\"block\" ){ w.style.display = \"none\"; }else{ w.style.display = "
"\"block\"; } } function toggle_search() { var w = document."
"getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ w.style."
"display = \"none\"; } else { w.style.display = \"block\"; "
"setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, "
"30); } } function div_off(nm){document.getElementById(nm).style."
"display=\"none\";} window.onbeforeunload = function(e)"
"{div_off(\"submenu\");} /* Disable the Search feature if we are not "
"operating from CGI, since */ /* Search is accomplished using CGI and will "
"not work without it. */ if( !location.origin || !location.origin.match || !"
"location.origin.match(/http/) ){ document."
"getElementById(\"search_menubutton\").style.display = \"none\"; } /* Used by "
"the Hide/Show button beside syntax diagrams, to toggle the */ function "
"hideorshow(btn,obj){ var x = document.getElementById(obj); var b = document."
"getElementById(btn); if( x.style.display!='none' ){ x.style.display = "
"'none'; b.innerHTML='show'; }else{ x.style.display = ''; b."
"innerHTML='hide'; } return false; } var antiRobot = 0; function antiRobotGo()"
"{ if( antiRobot!=3 ) return; antiRobot = 7; var j = document."
"getElementById(\"mtimelink\"); if(j && j.hasAttribute(\"data-href\")) j."
"href=j.getAttribute(\"data-href\"); } function antiRobotDefense(){ document."
"body.onmousedown=function(){ antiRobot |= 2; antiRobotGo(); document.body."
"onmousedown=null; } document.body.onmousemove=function(){ antiRobot |= 2; "
"antiRobotGo(); document.body.onmousemove=null; } setTimeout(function()"
"{ antiRobot |= 1; antiRobotGo(); }, 100)  antiRobotGo(); } "
"antiRobotDefense();"
msgstr "function toggle_div(nm) { var w = document.getElementById(nm); if( w.style.display==\"block\" ){ w.style.display = \"none\"; }else{ w.style.display = \"block\"; } } function toggle_search() { var w = document.getElementById(\"searchmenu\"); if( w.style.display==\"block\" ){ w.style.display = \"none\"; } else { w.style.display = \"block\"; setTimeout(function(){ document.getElementById(\"searchbox\").focus()  }, 30); } } function div_off(nm){document.getElementById(nm).style.display=\"none\";} window.onbeforeunload = function(e){div_off(\"submenu\");} /* Disable the Search feature if we are not operating from CGI, since */ /* Search is accomplished using CGI and will not work without it. */ if( !location.origin || !location.origin.match || !location.origin.match(/http/) ){ document.getElementById(\"search_menubutton\").style.display = \"none\"; } /* Used by the Hide/Show button beside syntax diagrams, to toggle the */ function hideorshow(btn,obj){ var x = document.getElementById(obj); var b = document.getElementById(btn); if( x.style.display!='none' ){ x.style.display = 'none'; b.innerHTML='show'; }else{ x.style.display = ''; b.innerHTML='hide'; } return false; } var antiRobot = 0; function antiRobotGo(){ if( antiRobot!=3 ) return; antiRobot = 7; var j = document.getElementById(\"mtimelink\"); if(j && j.hasAttribute(\"data-href\")) j.href=j.getAttribute(\"data-href\"); } function antiRobotDefense(){ document.body.onmousedown=function(){ antiRobot |= 2; antiRobotGo(); document.body.onmousedown=null; } document.body.onmousemove=function(){ antiRobot |= 2; antiRobotGo(); document.body.onmousemove=null; } setTimeout(function(){ antiRobot |= 1; antiRobotGo(); }, 100)  antiRobotGo(); } antiRobotDefense();"

#. type: Content of: <html><body><div><div><div>
#: sedout/datatype3.html:124
msgid ""
"<a onclick=\"toggle_toc()\"> <span class=\"fancy_toc_mark\" "
"id=\"toc_mk\">&#x25ba;</span> Table Of Contents </a>"
msgstr "<a onclick=\"toggle_toc()\"> <span class=\"fancy_toc_mark\" id=\"toc_mk\">&#x25ba;</span> Table Of Contents </a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:128
msgid "<a href=\"#datatypes_in_sqlite\">1. Datatypes In SQLite</a>"
msgstr "<a href=\"#datatypes_in_sqlite\">1. Datatypes In SQLite</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:129
msgid ""
"<a href=\"#storage_classes_and_datatypes\">2. Storage Classes and Datatypes</"
"a>"
msgstr "<a href=\"#storage_classes_and_datatypes\">2. 格納クラス(Storage Classes)とデータ型</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:130
msgid "<a href=\"#boolean_datatype\">2.1. Boolean Datatype</a>"
msgstr "<a href=\"#boolean_datatype\">2.1. Boolean Datatype</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:131
msgid "<a href=\"#date_and_time_datatype\">2.2. Date and Time Datatype</a>"
msgstr "<a href=\"#date_and_time_datatype\">2.2. Date and Time Datatype</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:132
msgid "<a href=\"#type_affinity\">3. Type Affinity</a>"
msgstr "<a href=\"#type_affinity\">3. 型好相性(Affinity)</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:133
msgid ""
"<a href=\"#determination_of_column_affinity\">3.1. Determination Of Column "
"Affinity</a>"
msgstr "<a href=\"#determination_of_column_affinity\">3.1. 列好相性(Column Affinity)の決定</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:134
msgid "<a href=\"#affinity_name_examples\">3.1.1. Affinity Name Examples</a>"
msgstr "<a href=\"#affinity_name_examples\">3.1.1. 好相性名の例</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:135
msgid "<a href=\"#affinity_of_expressions\">3.2. Affinity Of Expressions</a>"
msgstr "<a href=\"#affinity_of_expressions\">3.2. 式の好相性</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:136
msgid ""
"<a href=\"#column_affinity_for_views_and_subqueries\">3.3. Column Affinity "
"For Views And Subqueries</a>"
msgstr "<a href=\"#column_affinity_for_views_and_subqueries\">3.3. View とサブクエリの 列好相性</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:137
msgid ""
"<a href=\"#column_affinity_for_compound_views\">3.3.1. Column Affinity For "
"Compound Views</a>"
msgstr "<a href=\"#column_affinity_for_compound_views\">3.3.1. 複合Viewの列好相性</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:138
msgid ""
"<a href=\"#column_affinity_behavior_example\">3.4. Column Affinity Behavior "
"Example</a>"
msgstr "<a href=\"#column_affinity_behavior_example\">3.4. 列好相性の振る舞いの例</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:139
msgid "<a href=\"#comparison_expressions\">4. Comparison Expressions</a>"
msgstr "<a href=\"#comparison_expressions\">4. 比較式</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:140
msgid "<a href=\"#sort_order\">4.1. Sort Order</a>"
msgstr "<a href=\"#sort_order\">4.1. 並べ替え順</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:141
msgid ""
"<a href=\"#type_conversions_prior_to_comparison\">4.2. Type Conversions "
"Prior To Comparison</a>"
msgstr "<a href=\"#type_conversions_prior_to_comparison\">4.2. 比較前の型変換</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:142
msgid "<a href=\"#comparison_example\">4.3. Comparison Example</a>"
msgstr "<a href=\"#comparison_example\">4.3. 比較の例</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:143
msgid "<a href=\"#operators\">5. Operators</a>"
msgstr "<a href=\"#operators\">5. 演算子</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:144
msgid ""
"<a href=\"#sorting_grouping_and_compound_selects\">6. Sorting, Grouping and "
"Compound SELECTs</a>"
msgstr "<a href=\"#sorting_grouping_and_compound_selects\">6. 並べ替え(sorting)と集計(grouping)と複合(compound)SELECT</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:145
msgid "<a href=\"#collating_sequences\">7. Collating Sequences</a>"
msgstr "<a href=\"#collating_sequences\">7. 照合シーケンス(Collating Sequences)</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:146
msgid ""
"<a href=\"#assigning_collating_sequences_from_sql\">7.1. Assigning Collating "
"Sequences from SQL</a>"
msgstr "<a href=\"#assigning_collating_sequences_from_sql\">7.1. SQL から照合シーケンスを割り当てる</a>"

#. type: Content of: <html><body><div><div><div><div><div>
#: sedout/datatype3.html:147
msgid ""
"<a href=\"#collation_sequence_examples\">7.2. Collation Sequence Examples</a>"
msgstr "<a href=\"#collation_sequence_examples\">7.2. 照合シーケンス(Collation Sequence)の例</a>"

#. type: Content of: <html><body><div><div><script>
#: sedout/datatype3.html:151
msgid ""
"function toggle_toc(){ var sub = document.getElementById(\"toc_sub\")  var "
"mk = document.getElementById(\"toc_mk\")  if( sub.style.display!=\"block\" )"
"{ sub.style.display = \"block\"; mk.innerHTML = \"&#x25bc;\"; } else { sub."
"style.display = \"none\"; mk.innerHTML = \"&#x25ba;\"; } }"
msgstr "function toggle_toc(){ var sub = document.getElementById(\"toc_sub\")  var mk = document.getElementById(\"toc_mk\")  if( sub.style.display!=\"block\" ){ sub.style.display = \"block\"; mk.innerHTML = \"&#x25bc;\"; } else { sub.style.display = \"none\"; mk.innerHTML = \"&#x25ba;\"; } }"

#. type: Content of: <html><body><div><h1>
#: sedout/datatype3.html:169
msgid "<span>1. </span>Datatypes In SQLite"
msgstr "<span>1. </span>Datatypes In SQLite"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:170
msgid ""
"Most SQL database engines (every SQL database engine other than SQLite, as "
"far as we know) uses static, rigid typing.  With static typing, the datatype "
"of a value is determined by its container - the particular column in which "
"the value is stored."
msgstr "ほとんどの SQL データベース・エンジン (私たちが知る限り、SQLite 以外のすべての SQL データベース・エンジン) は、 静的で厳格な型付けを使用します。 静的型付けでは、 値のデータ型はコンテナ(値が格納される特定の列)によって決定されます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:175
msgid ""
"SQLite uses a more general dynamic type system.  In SQLite, the datatype of "
"a value is associated with the value itself, not with its container.  The "
"dynamic type system of SQLite is backwards compatible with the more common "
"static type systems of other database engines in the sense that SQL "
"statements that work on statically typed databases work the same way in "
"SQLite.  However, the dynamic typing in SQLite allows it to do things which "
"are not possible in traditional rigidly typed databases.  <a "
"href=\"flextypegood.html\">Flexible typing is a feature</a> of SQLite, not a "
"bug."
msgstr "SQLite は、 より一般的な動的型システムを使用します。 SQLite では、 値のデータ型はコンテナではなく、 値自体に関連付けられます。 SQLite の動的型システムは、 静的に型指定されたデータベースで機能する SQL ステートメントが SQLite でも同じように機能するという意味で、 他のデータベース・エンジンの、 より一般的な静的型システムと下位互換性があります。 ただし、SQLite の動的型付けにより、 従来の厳格に型付けされたデータベースでは不可能なことを行うことができます。 <a href=\"flextypegood.html\">柔軟な型付けは SQLite の機能</a>であり、 バグではありません。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:184
msgid ""
"Update: As of version 3.37.0 (2021-11-27), SQLite provides <a "
"href=\"stricttables.html\">STRICT tables</a> that do rigid type enforcement, "
"for developers who prefer that kind of thing.  <a name=\"storageclasses\"></"
"a>"
msgstr "Update: バージョン 3.37.0 (2021-11-27) の時点で、 SQLite は厳格な型の強制を行う <a href=\"stricttables.html\">STRICT テーブル</a> を提供します。 そのようなことを好む開発者向けです。 <a name=\"storageclasses\"></a>"

#. type: Content of: <html><body><div><h1>
#: sedout/datatype3.html:190
msgid "<span>2. </span>Storage Classes and Datatypes"
msgstr "<span>2. </span>格納クラス(Storage Classes)とデータ型"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:192
msgid ""
"Each value stored in an SQLite database (or manipulated by the database "
"engine) has one of the following storage classes:"
msgstr "SQLite データベースに格納された(またはデータベース・エンジンによって操作された)各値には、 以下の格納クラス(storage classes)のいずれかがあります:"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:195
msgid "<b>NULL</b>.  The value is a NULL value."
msgstr "<b>NULL</b>: 値は NULL 値です。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:198
msgid ""
"<b>INTEGER</b>. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, "
"or 8 bytes depending on the magnitude of the value."
msgstr "<b>INTEGER</b>: 値は符号付き整数で、 値の大きさ(magnitude )に応じて 0、1、2、3、4、6、8 バイトのいずれかのサイズで格納されます。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:201
msgid ""
"<b>REAL</b>. The value is a floating point value, stored as an 8-byte IEEE "
"floating point number."
msgstr "<b>REAL</b>: 値は浮動小数点値で、 8 バイトの IEEE 浮動小数点数として格納されます。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:204
msgid ""
"<b>TEXT</b>. The value is a text string, stored using the database encoding "
"(UTF-8, UTF-16BE or UTF-16LE)."
msgstr "<b>TEXT</b>: 値はテキスト文字列(string)で、 データベースのエンコーディング (UTF-8 または UTF-16BE または UTF-16LE) を使用して保存されます。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:207
msgid ""
"<b>BLOB</b>. The value is a blob of data, stored exactly as it was input."
msgstr "<b>BLOB</b>: 値はデータの塊(blob)であり、 入力されたとおりに保存されます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:211
msgid ""
"A storage class is more general than a datatype.  The INTEGER storage class, "
"for example, includes 7 different integer datatypes of different lengths.  "
"<a href=\"fileformat2.html#record_format\">This makes a difference on disk.</"
"a> But as soon as INTEGER values are read off of disk and into memory for "
"processing, they are converted to the most general datatype (8-byte signed "
"integer).  And so for the most part, \"storage class\" is indistinguishable "
"from \"datatype\" and the two terms can be used interchangeably."
msgstr "格納クラス(storage class)は、 データ型よりも一般的です。  たとえば、 INTEGER 格納クラスには、 異なる長さの 7 つの異なる整数データ型が含まれています。 <a href=\"fileformat2.html#record_format\">これにより、 ディスク上で違いが生じます</a>。 しかし、 その INTEGER 値がディスクから読み取られ、 処理のためにメモリに読み込まれるとすぐに、最も一般的なデータ型(8バイトの符号付き整数)に変換されます。 そのため、 ほとんどの場合、「格納クラス」(storage class)は「データ型」と区別がつかず、 ２つの用語は同じ意味で使用できます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:221
msgid ""
"Any column in an SQLite version 3 database, except an <a "
"href=\"lang_createtable.html#rowid\">INTEGER PRIMARY KEY</a> column, may be "
"used to store a value of any storage class."
msgstr "<a href=\"lang_createtable.html#rowid\">INTEGER PRIMARY KEY</a>  列を除く SQLite バージョン 3 データベースの任意の列を使用して、 任意の格納クラス(storage class)の値を格納できます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:225
msgid ""
"All values in SQL statements, whether they are literals embedded in SQL "
"statement text or <a href=\"lang_expr.html#varparam\">parameters</a> bound "
"to <a href=\"c3ref/stmt.html\">precompiled SQL statements</a> have an "
"implicit storage class.  Under circumstances described below, the database "
"engine may convert values between numeric storage classes (INTEGER and REAL) "
"and TEXT during query execution."
msgstr "SQL ステートメント・テキストに埋め込まれたリテラルであるか、 <a href=\"c3ref/stmt.html\">プリ・コンパイルされた SQL ステートメント</a>に結び付けされた(boun) <a href=\"lang_expr.html#varparam\">パラメーター</a>であるかに関係なく、 SQL ステートメント内のすべての値には、 暗黙的な格納クラス(implicit storage class)があります。 以下に説明する状況では、 データベース・エンジンは、 クエリの実行中に数値格納クラス (INTEGER や REAL) と TEXT の間で値を変換する場合があります。"

#. type: Content of: <html><body><div>
#: sedout/datatype3.html:234
msgid "<a name=\"boolean\"></a>"
msgstr "<a name=\"boolean\"></a>"

#. type: Content of: <html><body><div><h2>
#: sedout/datatype3.html:236
msgid "<span>2.1. </span>Boolean Datatype"
msgstr "<span>2.1. </span>Boolean Datatype"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:238
msgid ""
"SQLite does not have a separate Boolean storage class.  Instead, Boolean "
"values are stored as integers 0 (false) and 1 (true)."
msgstr "SQLite には、 個別の Boolean 格納クラスはありません。 代わりに、 ブール値は整数 0 (false) や 1 (true) として格納されます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:241
msgid ""
"SQLite recognizes the keywords \"TRUE\" and \"FALSE\", as of version 3.23.0 "
"(2018-04-02) but those keywords are really just alternative spellings for "
"the integer literals 1 and 0 respectively.  <a name=\"datetime\"></a>"
msgstr "バージョン 3.23.0 (2018-04-02) の時点で、 SQLite はキーワード \"TRUE\" と \"FALSE\" を認識しますが、 これらのキーワードは実際には整数リテラル 1 と 0 の代替記述(alternative spellings)にすぎません。 <a name=\"datetime\"></a>"

#. type: Content of: <html><body><div><h2>
#: sedout/datatype3.html:248
msgid "<span>2.2. </span>Date and Time Datatype"
msgstr "<span>2.2. </span>Date and Time Datatype"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:250
msgid ""
"SQLite does not have a storage class set aside for storing dates and/or "
"times.  Instead, the built-in <a href=\"lang_datefunc.html\">Date And Time "
"Functions</a> of SQLite are capable of storing dates and times as TEXT, "
"REAL, or INTEGER values:"
msgstr "SQLite には、 日付や時刻を格納するための格納クラスが用意されていません。  代わりに、SQLite の組み込みの <a href=\"lang_datefunc.html\">日付と時刻関数</a> は、 日付と時刻を TEXT または REAL または INTEGER 値として格納できます。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:256
msgid "<b>TEXT</b> as ISO8601 strings (\"YYYY-MM-DD HH:MM:SS.SSS\")."
msgstr "<b>TEXT</b> 値では ISO8601 文字列 (\"YYYY-MM-DD HH:MM:SS.SSS\") として格納されます。"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:257
msgid ""
"<b>REAL</b> as Julian day numbers, the number of days since noon in "
"Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian "
"calendar."
msgstr "<b>REAL</b> はユリウス通日数(Julian day numbers)として、 先発グレゴリオ暦では紀元前 4714 年 11 月 24 日のグリニッジ正午からの日数です。(訳注: wikipedia より; ユリウス通日はユリウス暦紀元前4713年1月1日（先発グレゴリオ暦では紀元前4714年11月24日、 西暦 -4713年11月24日）の正午（世界時）を元期（＝0日目）とし、 日の単位で数える。 ユリウス通日は天文時の伝統に従い、日の起点は正午である。したがって、世界時の正午に日数（の整数部分）が増加する。 単にユリウス日（ユリウスび）ともいう。時刻値を示すために一般には小数が付けられる。 例えば、協定世界時（UTC）での2023年3月20日16:42のユリウス通日の値は、おおむね2460024.2である。 ( https://ja.wikipedia.org/wiki/ユリウス通日 )"

#. type: Content of: <html><body><div><ul><li>
#: sedout/datatype3.html:260
msgid ""
"<b>INTEGER</b> as Unix Time, the number of seconds since 1970-01-01 00:00:00 "
"UTC."
msgstr "<b>INTEGER</b> 値 は Unix 時間として(Unix Time)、 1970-01-01 00:00:00 UTC からの秒数です。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:264
msgid ""
"Applications can choose to store dates and times in any of these formats and "
"freely convert between formats using the built-in <a href=\"lang_datefunc."
"html\">date and time functions</a>."
msgstr "アプリケーションは、 これらの形式のいずれかで日付と時刻を保存することを選択し、 組み込みの <a href=\"lang_datefunc.html\">日付と時刻関数</a> を使用して、 これらの形式の間で自由に変換できます。"

#. type: Content of: <html><body><div>
#: sedout/datatype3.html:269
msgid "<a name=\"affinity\"></a>"
msgstr "<a name=\"affinity\"></a>"

#. type: Content of: <html><body><div><h1>
#: sedout/datatype3.html:271
msgid "<span>3. </span>Type Affinity"
msgstr "<span>3. </span>型好相性(Affinity)"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:274
msgid ""
"SQL database engines that use rigid typing will usually try to automatically "
"convert values to the appropriate datatype.  Consider this:"
msgstr "厳密な型指定を使用する SQL データベース・エンジンは、 通常、 値を適切なデータ型に自動的に変換しようとします。 以下について考えてみましょう:"

#. type: Content of: <html><body><div><blockquote><pre>
#: sedout/datatype3.html:278
#, no-wrap
msgid ""
"CREATE TABLE t1(a INT, b VARCHAR(10));\n"
"INSERT INTO t1(a,b) VALUES('123',456);\n"
msgstr ""
"CREATE TABLE t1(a INT, b VARCHAR(10));\n"
"INSERT INTO t1(a,b) VALUES('123',456);\n"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:283
msgid ""
"Rigidly-typed database will convert the string '123' into an integer 123 and "
"the integer 456 into a string '456' prior to doing the insert."
msgstr "厳密に型指定されたデータベースは、 挿入を行う前に文字列 '123' を整数 123 に、 整数 456 を文字列 '456' に変換します。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:288
msgid ""
"In order to maximize compatibility between SQLite and other database "
"engines, and so that the example above will work on SQLite as it does on "
"other SQL database engines, SQLite supports the concept of \"type affinity\" "
"on columns.  The type affinity of a column is the recommended type for data "
"stored in that column.  The important idea here is that the type is "
"recommended, not required.  Any column can still store any type of data.  It "
"is just that some columns, given the choice, will prefer to use one storage "
"class over another.  The preferred storage class for a column is called its "
"\"affinity\"."
msgstr "SQLite と他のデータベース・エンジンとの互換性を最大限に高め、 上記の例が他の SQL データベース・エンジンと同様に SQLite でも機能するように、 SQLite は列の「型好相性」(type affinity;その列に一番相性がいい(高い)格納クラス)の概念をサポートしています。 列の型好相性は、 その列に格納されるデータの推奨される型です。 ここで重要な点は、 型は必須ではなく推奨されるということです。 任意の列には、 任意の型のデータを格納できます。 選択肢が与えられた一部の列は、 ある格納クラスを別の格納クラスよりも好んで使用するだけです。  列の優先格納クラスは、「好相性」(affinity;アフィニティ)と呼ばれます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:300
msgid ""
"Each column in an SQLite 3 database is assigned one of the following type "
"affinities:"
msgstr "SQLite 3 データベースの各列には、 以下の型好相性(type affinities)のいずれかが割り当てられます:"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:303 sedout/datatype3.html:436
#: sedout/datatype3.html:438
msgid "TEXT"
msgstr "TEXT"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:304 sedout/datatype3.html:456
#: sedout/datatype3.html:461
msgid "NUMERIC"
msgstr "NUMERIC"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:305 sedout/datatype3.html:418
#: sedout/datatype3.html:426
msgid "INTEGER"
msgstr "INTEGER"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:306 sedout/datatype3.html:448
#: sedout/datatype3.html:452
msgid "REAL"
msgstr "REAL"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:307 sedout/datatype3.html:442
#: sedout/datatype3.html:444
msgid "BLOB"
msgstr "BLOB"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:310
msgid ""
"(Historical note: The \"BLOB\" type affinity used to be called \"NONE\".  "
"But that term was easy to confuse with \"no affinity\" and so it was "
"renamed.)"
msgstr "(歴史的なメモ:  \"BLOB\" 型の好相性は、 以前は \"NONE\" と呼ばれていました。しかし、この用語は 「好相性無し」と混同しやすいため、 名前が変更されました。)"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:314
msgid ""
"A column with TEXT affinity stores all data using storage classes NULL, TEXT "
"or BLOB. If numerical data is inserted into a column with TEXT affinity it "
"is converted into text form before being stored."
msgstr "TEXT 好相性を持つ列には、 格納クラス NULL または TEXT または BLOB を使用してすべてのデータが格納されます。 数値データが TEXT 好相性を持つ列に挿入されると、 格納される前にテキスト形式に変換されます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:318
msgid ""
"A column with NUMERIC affinity may contain values using all five storage "
"classes.  When text data is inserted into a NUMERIC column, the storage "
"class of the text is converted to INTEGER or REAL (in order of preference) "
"if the text is a well-formed integer or real literal, respectively.  If the "
"TEXT value is a well-formed integer literal that is too large to fit in a 64-"
"bit signed integer, it is converted to REAL.  For conversions between TEXT "
"and REAL storage classes, only the first 15 significant decimal digits of "
"the number are preserved.  If the TEXT value is not a well-formed integer or "
"real literal, then the value is stored as TEXT.  For the purposes of this "
"paragraph, hexadecimal integer literals are not considered well-formed and "
"are stored as TEXT.  (This is done for historical compatibility with "
"versions of SQLite prior to <a href=\"releaselog/3_8_6.html\">version 3.8.6</"
"a> 2014-08-15 where hexadecimal integer literals were first introduced into "
"SQLite.)  If a floating point value that can be represented exactly as an "
"integer is inserted into a column with NUMERIC affinity, the value is "
"converted into an integer.  No attempt is made to convert NULL or BLOB "
"values."
msgstr "NUMERIC 好相性を持つ列には、 5つの格納クラスすべてを使用する値が含まれる場合があります。 テキスト・データが NUMERIC 列に挿入されると、 テキストが整形式の整数または実数リテラルである場合、 テキストの格納クラスは (優先順に) INTEGER または REAL に変換されます。 TEXT 値が整形式の整数リテラルであり、 大きすぎて 64 ビットの符号付き整数に収まらない場合は、 REAL に変換されます。 TEXT と REAL の格納クラス間の変換では、 数値の最初の 15 桁の有効数字のみが保持されます。 TEXT 値が整形式の整数または実数リテラルでない場合、 値は TEXT として格納されます。 ここでは、16 進数の整数リテラルは整形式とは見なされず、TEXT として格納されます。 (これは、16 進整数リテラルが最初に SQLite に導入された<a href=\"releaselog/3_8_6.html\">バージョン 3.8.6</a>(2014-08-15)より前のバージョンの SQLite との歴史的な互換性のために行われます。)  正確に整数として表現できる浮動小数点値が NUMERIC 好相性を持つ列に挿入されると、 その値は整数に変換されます。 NULL または BLOB 値の変換は試行されません。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:338
msgid ""
"A string might look like a floating-point literal with a decimal point and/"
"or exponent notation but as long as the value can be expressed as an "
"integer, the NUMERIC affinity will convert it into an integer. Hence, the "
"string '3.0e+5' is stored in a column with NUMERIC affinity as the integer "
"300000, not as the floating point value 300000.0."
msgstr "文字列(string)は、 小数点 および/また は指数表記のある浮動小数点リテラルのように見えるかもしれませんが、 値が整数として表現できる限り、 NUMERIC 好相性はそれを整数に変換します。 したがって、 文字列 '3.0e+5' は、 浮動小数点値 300000.0 としてではなく、 整数 300000 として NUMERIC 好相性を持つ列に格納されます。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:345
msgid ""
"A column that uses INTEGER affinity behaves the same as a column with "
"NUMERIC affinity.  The difference between INTEGER and NUMERIC affinity is "
"only evident in a <a href=\"lang_expr.html#castexpr\">CAST expression</a>: "
"The expression \"CAST(4.0 AS INT)\" returns an integer 4, whereas \"CAST(4.0 "
"AS NUMERIC)\" leaves the value as a floating-point 4.0."
msgstr "INTEGER 好相性を使用する列は、 NUMERIC アフィニティを使用する列と同一に振る舞います。 INTEGER と NUMERIC の好相性の違いは、 <a href=\"lang_expr.html#castexpr\">CAST 式</a>でのみ明らかです。 式 \"CAST(4.0 AS INT)\" は整数 4 を返しますが、\"CAST( 4.0 AS NUMERIC)\" は、 値を浮動小数点 4.0 のままにします。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:351
msgid ""
"A column with REAL affinity behaves like a column with NUMERIC affinity "
"except that it forces integer values into floating point representation.  "
"(As an internal optimization, small floating point values with no fractional "
"component and stored in columns with REAL affinity are written to disk as "
"integers in order to take up less space and are automatically converted back "
"into floating point as the value is read out.  This optimization is "
"completely invisible at the SQL level and can only be detected by examining "
"the raw bits of the database file.)"
msgstr "REAL 好相性を持つ列は、 整数値を強制的に浮動小数点表現にする点を除いて、 NUMERIC 好相性を持つ列のように振る舞います。 (内部の最適化として、 小数部分を持たず、 REAL 好相性を持つ列に格納された小さな浮動小数点値は、 使用するスペースを少なくするために整数としてディスクに書き込まれ、 値が読み取られると自動的に浮動小数点に変換されます。 最適化は SQL レベルでは全く見えず、 データベース・ファイルの生のビットを調べることによってのみ検出できます。)"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:361
msgid ""
"A column with affinity BLOB does not prefer one storage class over another "
"and no attempt is made to coerce data from one storage class into another."
msgstr "BLOB 好相性を持つ列は、 ある格納クラスを別の格納クラスより優先することはなく、 かつ、 ある格納クラスから別の格納クラスにデータを強制する試みは行われません。"

#. type: Content of: <html><body><div>
#: sedout/datatype3.html:365
msgid "<a name=\"affname\"></a>"
msgstr "<a name=\"affname\"></a>"

#. type: Content of: <html><body><div><h2>
#: sedout/datatype3.html:367
msgid "<span>3.1. </span>Determination Of Column Affinity"
msgstr "<span>3.1. </span>列好相性(Column Affinity)の決定"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:369
msgid ""
"For tables not declared as <a href=\"stricttables.html\">STRICT</a>, the "
"affinity of a column is determined by the declared type of the column, "
"according to the following rules in the order shown:"
msgstr "<a href=\"stricttables.html\">STRICT</a> として宣言されていないテーブルの場合、列の好相性(こうあいしょう;affinity)は、 以下の規則に従って、 列の宣言された型によって決定されます。"

#. type: Content of: <html><body><div><ol><li>
#: sedout/datatype3.html:374
msgid ""
"If the declared type contains the string \"INT\" then it is assigned INTEGER "
"affinity."
msgstr "宣言された型に文字列 \"INT\" が含まれている場合、 INTEGER 好相性(affinity)が割り当てられます。"

#. type: Content of: <html><body><div><ol><li>
#: sedout/datatype3.html:377
msgid ""
"If the declared type of the column contains any of the strings \"CHAR\", "
"\"CLOB\", or \"TEXT\" then that column has TEXT affinity.  Notice that the "
"type VARCHAR contains the string \"CHAR\" and is thus assigned TEXT affinity."
msgstr "列の宣言された型に文字列 \"CHAR\" または  \"CLOB\" または  \"TEXT\" が含まれている場合、 その列には TEXT 好相性があります。 VARCHAR 型には文字列 \"CHAR\" が含まれているため、 TEXT 好相性が割り当てられていることに注意してください(訳注: CLOB;キャラクター・ラージ・オブジェクト。 OracleやIBM DB2とかにある型)。"

#. type: Content of: <html><body><div><ol><li>
#: sedout/datatype3.html:382
msgid ""
"If the declared type for a column contains the string \"BLOB\" or if no type "
"is specified then the column has affinity BLOB."
msgstr "列の宣言された型に文字列 \"BLOB\" が含まれている場合、 または型が指定されていない場合、 列には BLOB 好相性があります。"

#. type: Content of: <html><body><div><ol><li>
#: sedout/datatype3.html:386
msgid ""
"If the declared type for a column contains any of the strings \"REAL\", "
"\"FLOA\", or \"DOUB\" then the column has REAL affinity."
msgstr "列の宣言された型に文字列 \"REAL\" または \"FLOA\" または \"DOUB\" のいずれかが含まれている場合、 その列には REAL 好相性 があります。"

#. type: Content of: <html><body><div><ol><li>
#: sedout/datatype3.html:390
msgid "Otherwise, the affinity is NUMERIC."
msgstr "それ以外の場合は、 NUMERIC 好相性です。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:393
msgid ""
"Note that the order of the rules for determining column affinity is "
"important.  A column whose declared type is \"CHARINT\" will match both "
"rules 1 and 2 but the first rule takes precedence and so the column affinity "
"will be INTEGER."
msgstr "列の好相性を決定するルールの順序は重要であるということに注意してください。 宣言された型が \"CHARINT\" である列は、ルール 1 と 2 の両方にマッチングしますが、 最初のルールの方が優先されるため、 列の好相性は INTEGER になります。"

#. type: Content of: <html><body><div><h3>
#: sedout/datatype3.html:398
msgid "<span>3.1.1. </span>Affinity Name Examples"
msgstr "<span>3.1.1. </span>好相性名の例"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:400
msgid ""
"The following table shows how many common datatype names from more "
"traditional SQL implementations are converted into affinities by the five "
"rules of the previous section.  This table shows only a small subset of the "
"datatype names that SQLite will accept.  Note that numeric arguments in "
"parentheses that following the type name (ex: \"VARCHAR(255)\") are ignored "
"by SQLite - SQLite does not impose any length restrictions (other than the "
"large global <a href=\"limits.html#max_length\">SQLITE_MAX_LENGTH</a> limit) "
"on the length of strings, BLOBs or numeric values."
msgstr "以下の表は、 より伝統的なSQLの実装でよく使われるデータ型名が、 上記の5つの規則によってどれだけ好相性に変換されるかを示したものです。 注意: 型名に続く括弧内の数値引数 (例: \"VARCHAR(255)\") は SQLite によって無視されることに注意してください - SQLite は、 (グローバルの <a href=\"limits.html#max_length\">SQLITE_MAX_LENGTH</a> 制限を除き、)文字列の長さ、BLOBの長さ、数値の長さに長さ制限を課しません。"

#. type: Content of: <html><body><div><blockquote><table><tr><th>
#: sedout/datatype3.html:411
msgid "Example Typenames From The"
msgstr "CREATE TABLE"

#. type: Content of: <html><body><div><blockquote><table><tr><th><br>
#: sedout/datatype3.html:411
msgid "CREATE TABLE Statement"
msgstr "ステートメントまたは"

#. type: Content of: <html><body><div><blockquote><table><tr><th><br><br>
#: sedout/datatype3.html:412
msgid "or CAST Expression"
msgstr "CAST 式からの型名の例"

#. type: Content of: <html><body><div><blockquote><table><tr><th>
#: sedout/datatype3.html:413
msgid "Resulting Affinity"
msgstr "結果の好相性"

#. type: Content of: <html><body><div><blockquote><table><tr><th>
#: sedout/datatype3.html:414
msgid "Rule Used To Determine Affinity"
msgstr "好相性の決定に使われた規則番号"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:417
msgid "INT"
msgstr "INT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br>
#: sedout/datatype3.html:419
msgid "TINYINT"
msgstr "TINYINT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br>
#: sedout/datatype3.html:420
msgid "SMALLINT"
msgstr "SMALLINT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br>
#: sedout/datatype3.html:421
msgid "MEDIUMINT"
msgstr "MEDIUMINT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br>
#: sedout/datatype3.html:422
msgid "BIGINT"
msgstr "BIGINT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br><br>
#: sedout/datatype3.html:423
msgid "UNSIGNED BIG INT"
msgstr "UNSIGNED BIG INT"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br><br><br>
#: sedout/datatype3.html:424
msgid "INT2"
msgstr "INT2"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br><br><br><br>
#: sedout/datatype3.html:425
msgid "INT8"
msgstr "INT8"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:427
msgid "1"
msgstr "1"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:430
msgid "CHARACTER(20)"
msgstr "CHARACTER(20)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br>
#: sedout/datatype3.html:431
msgid "VARCHAR(255)"
msgstr "VARCHAR(255)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br>
#: sedout/datatype3.html:432
msgid "VARYING CHARACTER(255)"
msgstr "VARYING CHARACTER(255)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br>
#: sedout/datatype3.html:433
msgid "NCHAR(55)"
msgstr "NCHAR(55)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br>
#: sedout/datatype3.html:434
msgid "NATIVE CHARACTER(70)"
msgstr "NATIVE CHARACTER(70)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br>
#: sedout/datatype3.html:435
msgid "NVARCHAR(100)"
msgstr "NVARCHAR(100)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br><br><br><br>
#: sedout/datatype3.html:437
msgid "CLOB"
msgstr "CLOB"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:439
msgid "2"
msgstr "2"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br>
#: sedout/datatype3.html:443
msgid "<i>no datatype specified</i>"
msgstr "<i>データ型指定無し</i>"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:445
msgid "3"
msgstr "3"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br>
#: sedout/datatype3.html:449
msgid "DOUBLE"
msgstr "DOUBLE"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br>
#: sedout/datatype3.html:450
msgid "DOUBLE PRECISION"
msgstr "DOUBLE PRECISION"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br>
#: sedout/datatype3.html:451
msgid "FLOAT"
msgstr "FLOAT"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:453
msgid "4"
msgstr "4"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br>
#: sedout/datatype3.html:457
msgid "DECIMAL(10,5)"
msgstr "DECIMAL(10,5)"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br>
#: sedout/datatype3.html:458
msgid "BOOLEAN"
msgstr "BOOLEAN"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br>
#: sedout/datatype3.html:459
msgid "DATE"
msgstr "DATE"

#. type: Content of: <html><body><div><blockquote><table><tr><td><br><br><br><br>
#: sedout/datatype3.html:460
msgid "DATETIME"
msgstr "DATETIME"

#. type: Content of: <html><body><div><blockquote><table><tr><td>
#: sedout/datatype3.html:462
msgid "5"
msgstr "5"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:466
msgid ""
"Note that a declared type of \"FLOATING POINT\" would give INTEGER affinity, "
"not REAL affinity, due to the \"INT\" at the end of \"POINT\".  And the "
"declared type of \"STRING\" has an affinity of NUMERIC, not TEXT.  <a "
"name=\"expraff\"></a>"
msgstr "注意: \"FLOATING POINT\" と宣言された型は、 \"POINT\" の末尾に \"INT\" があるため、 REAL 好相性ではなく、 INTEGER 好相性 を与えることに注意してください。 そして \"STRING\" と宣言された型は、 TEXT ではなく NUMERIC 好相性があります。 <a name=\"expraff\"></a>"

#. type: Content of: <html><body><div><h2>
#: sedout/datatype3.html:472
msgid "<span>3.2. </span>Affinity Of Expressions"
msgstr "<span>3.2. </span>式の好相性"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:474
msgid ""
"Every table column has a type affinity (one of BLOB, TEXT, INTEGER, REAL, or "
"NUMERIC) but expressions do not necessarily have an affinity."
msgstr "すべてのテーブル列には型の好相性(BLOB、TEXT、INTEGER、REAL、NUMERIC のいずれか) がありますが、 式には必ずしも好相性があるとは限りません。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:477
msgid "Expression affinity is determined by the following rules:"
msgstr "式の好相性は、以下のルールによって決定されます:"

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:480
msgid ""
"The right-hand operand of an IN or NOT IN operator has no affinity if the "
"operand is a list, or has the same affinity as the affinity of the result "
"set expression if the operand is a SELECT."
msgstr "IN または NOT IN 演算子の右側のオペランドは、 オペランドがリストの場合は好相性(affinity)を持たず、 オペランドが SELECT の場合は結果セット式の好相性と同じ好相性を持ちます。"

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:485
msgid ""
"When an expression is a simple reference to a column of a real table (not a "
"<a href=\"lang_createview.html\">VIEW</a> or subquery) then the expression "
"has the same affinity as the table column."
msgstr "式が(<a href=\"lang_createview.html\">VIEW</a> またはサブクエリではない、)実際のテーブルの列への単純な参照である場合、 式はテーブルの列と同じ好相性を持ちます。"

#. type: Content of: <html><body><div><p><ul><li><ul><li>
#: sedout/datatype3.html:489
msgid ""
"Parentheses around the column name are ignored.  Hence if X and Y.Z are "
"column names, then (X) and (Y.Z) are also considered column names and have "
"the affinity of the corresponding columns."
msgstr "列名を囲む丸括弧(parentheses)は無視されます。 したがって、 X と Y.Z が列名の場合、 (X) と (Y.Z) も列名と見なされ、 対応する列の好相性があります。"

#. type: Content of: <html><body><div><p><ul><li><ul><li>
#: sedout/datatype3.html:493
msgid ""
"Any operators applied to column names, including the no-op unary \"+\" "
"operator, convert the column name into an expression which always has no "
"affinity.  Hence even if X and Y.Z are column names, the expressions +X and "
"+Y.Z are not column names and have no affinity."
msgstr "no-op の \"+\" 単項演算子を含め、 列名に適用されるすべての演算子は、 列名を常に好相性のない式に変換します。  したがって、 X と Y.Z が列名であっても、 式 +X と +Y.Z は列名ではなく、 好相性はありません。"

#. type: Content of: <html><body><div><p><ul><li><p>
#: sedout/datatype3.html:499
msgid ""
"An expression of the form \"CAST(<i>expr</i> AS <i>type</i>)\" has an "
"affinity that is the same as a column with a declared type of \"<i>type</"
"i>\"."
msgstr "\"CAST(<i>expr</i> AS <i>type</i>)\" という形式の式には、 宣言された型 \"<i>type</i>\" を持つ列と同じ好相性があります。"

#. type: Content of: <html><body><div><p><ul><li><p>
#: sedout/datatype3.html:503
msgid "A COLLATE operator has the same affinity as its left-hand side operand."
msgstr "COLLATE 演算子は、 左側のオペランドと同じ好相性を持ちます。"

#. type: Content of: <html><body><div><p><ul><li><p>
#: sedout/datatype3.html:505
msgid "Otherwise, an expression has no affinity."
msgstr "それ以外の場合、 式には好相性がありません。"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:508
msgid "<a name=\"affview\"></a>"
msgstr "<a name=\"affview\"></a>"

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:510
msgid "<span>3.3. </span>Column Affinity For Views And Subqueries"
msgstr "<span>3.3. </span>View とサブクエリの 列好相性"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:512
#, fuzzy
msgid ""
"The \"columns\" of a <a href=\"lang_createview.html\">VIEW</a> or FROM-"
"clause subquery are really the expressions in the result set of the <a "
"href=\"lang_select.html\">SELECT</a> statement that implements the VIEW or "
"subquery.  Thus, the affinity for columns of a VIEW or subquery are "
"determined by the expression affinity rules above.  Consider an example:"
msgstr ""
"<a href=\"lang_createview.html\">VIEW</a> または FROM 句のサブクエリの「列」は、実際には <a href=\"lang_select.html\">SELECT</a の結果セットの式です。 > VIEW またはサブクエリを実装するステートメント。 したがって、VIEW またはサブクエリの列のアフィニティは、上記の式のアフィニティ ルールによって決定されます。 例を考えてみましょう:\n"
"The \"columns\" of a <a href=\"lang_createview.html\">VIEW</a> or FROM-clause subquery are really the expressions in the result set of the <a href=\"lang_select.html\">SELECT</a> statement that implements the VIEW or subquery.  Thus, the affinity for columns of a VIEW or subquery are determined by the expression affinity rules above.  Consider an example:"

#. type: Content of: <html><body><div><p><blockquote><pre>
#: sedout/datatype3.html:520
#, no-wrap
msgid ""
"CREATE TABLE t1(a INT, b TEXT, c REAL);\n"
"CREATE VIEW v1(x,y,z) AS SELECT b, a+c, 42 FROM t1 WHERE b!=11;\n"
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:524
msgid ""
"The affinity of the v1.x column will be the same as the affinity of t1.b "
"(TEXT), since v1.x maps directly into t1.b.  But columns v1.y and v1.z both "
"have no affinity, since those columns map into expression a+c and 42, and "
"expressions always have no affinity.  <a name=\"affcompoundview\"></a>"
msgstr ""

#. type: Content of: <html><body><div><p><h3>
#: sedout/datatype3.html:532
msgid "<span>3.3.1. </span>Column Affinity For Compound Views"
msgstr "<span>3.3.1. </span>複合Viewの列好相性"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:534
msgid ""
"When the <a href=\"lang_select.html\">SELECT</a> statement that implements a "
"<a href=\"lang_createview.html\">VIEW</a> or FROM-clause subquery is a <a "
"href=\"lang_select.html#compound\">compound SELECT</a> then the affinity of "
"each column of the VIEW or subquery will be the affinity of the "
"corresponding result column for one of the individual SELECT statements that "
"make up the compound.  However, it is indeterminate which of the SELECT "
"statements will be used to determine affinity.  Different constituent SELECT "
"statements might be used to determine affinity at different times during "
"query evaluation.  The choice might vary across different versions of "
"SQLite.  The choice might change between one query and the next in the same "
"version of SQLite.  The choice might be different at different times within "
"the same query.  Hence, you can never be sure what affinity will be used for "
"columns of a compound SELECT that have different affinities in the "
"constituent subqueries."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:551
msgid ""
"Best practice is to avoid mixing affinities in a compound SELECT if you care "
"about the datatype of the result.  Mixing affinities in a compound SELECT "
"can lead to surprising and unintuitive results.  See, for example, <a "
"href=\"https://sqlite.org/forum/forumpost/02d7be94d7\">forum post "
"02d7be94d7</a>."
msgstr ""

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:556
msgid "<span>3.4. </span>Column Affinity Behavior Example"
msgstr "<span>3.4. </span>列好相性の振る舞いの例"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:558
msgid ""
"The following SQL demonstrates how SQLite uses column affinity to do type "
"conversions when values are inserted into a table."
msgstr ""

#. type: Content of: <html><body><div><p><blockquote><pre>
#: sedout/datatype3.html:563
#, no-wrap
msgid ""
"CREATE TABLE t1(\n"
"    t  TEXT,     -- text affinity by rule 2\n"
"    nu NUMERIC,  -- numeric affinity by rule 5\n"
"    i  INTEGER,  -- integer affinity by rule 1\n"
"    r  REAL,     -- real affinity by rule 4\n"
"    no BLOB      -- no affinity by rule 3\n"
");\n"
"\n"
"-- Values stored as TEXT, INTEGER, INTEGER, REAL, TEXT.\n"
"INSERT INTO t1 VALUES('500.0', '500.0', '500.0', '500.0', '500.0');\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|text\n"
"\n"
"-- Values stored as TEXT, INTEGER, INTEGER, REAL, REAL.\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(500.0, 500.0, 500.0, 500.0, 500.0);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|real\n"
"\n"
"-- Values stored as TEXT, INTEGER, INTEGER, REAL, INTEGER.\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(500, 500, 500, 500, 500);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|integer\n"
"\n"
"-- BLOBs are always stored as BLOBs regardless of column affinity.\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(x'0500', x'0500', x'0500', x'0500', x'0500');\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"blob|blob|blob|blob|blob\n"
"\n"
"-- NULLs are also unaffected by affinity\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(NULL,NULL,NULL,NULL,NULL);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"null|null|null|null|null\n"
msgstr ""
"CREATE TABLE t1(\n"
"    t  TEXT,     -- TEXT好相性。規則2による\n"
"    nu NUMERIC,  -- NUMERIC好相性。規則5による\n"
"    i  INTEGER,  -- INTEGER好相性。規則1による\n"
"    r  REAL,     -- REAL好相性。規則4による\n"
"    no BLOB      -- 好相性なし。規則3による\n"
");\n"
"\n"
"-- それぞれ TEXT, INTEGER, INTEGER, REAL, TEXT として格納される\n"
"INSERT INTO t1 VALUES('500.0', '500.0', '500.0', '500.0', '500.0');\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|text\n"
"\n"
"-- それぞれ TEXT, INTEGER, INTEGER, REAL, REAL として格納される\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(500.0, 500.0, 500.0, 500.0, 500.0);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|real\n"
"\n"
"-- それぞれ TEXT, INTEGER, INTEGER, REAL, INTEGER として格納される\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(500, 500, 500, 500, 500);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"text|integer|integer|real|integer\n"
"\n"
"-- BLOB は、列の好相性に関係なく、常に BLOB として格納されます\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(x'0500', x'0500', x'0500', x'0500', x'0500');\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"blob|blob|blob|blob|blob\n"
"\n"
"-- NULL も好相性の影響を受けません\n"
"DELETE FROM t1;\n"
"INSERT INTO t1 VALUES(NULL,NULL,NULL,NULL,NULL);\n"
"SELECT typeof(t), typeof(nu), typeof(i), typeof(r), typeof(no) FROM t1;\n"
"null|null|null|null|null\n"

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:602
msgid "<a name=\"comparisons\"></a>"
msgstr "<a name=\"comparisons\"></a>"

#. type: Content of: <html><body><div><p><h1>
#: sedout/datatype3.html:604
msgid "<span>4. </span>Comparison Expressions"
msgstr "<span>4. </span>比較式"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:606
msgid ""
"SQLite version 3 has the usual set of SQL comparison operators including "
"\"=\", \"==\", \"&lt;\", \"&lt;=\", \"&gt;\", \"&gt;=\", \"!=\", \"\", "
"\"IN\", \"NOT IN\", \"BETWEEN\", \"IS\", and \"IS NOT\", .  <a "
"name=\"sortorder\"></a>"
msgstr "SQLite バージョン 3 には、SQL 比較演算子の通常のセットがあります。 \"=\", \"==\", \"&lt;\", \"&lt;=\", \"&gt;\", \"&gt;=\", \"!=\", \"\", \"IN\", \"NOT IN\", \"BETWEEN\", \"IS\", \"IS NOT\" です。 (訳注: 念の為いうと、\"=&lt;\" とか  \"=&gt;\" とか無い) <a name=\"sortorder\"></a>"

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:612
msgid "<span>4.1. </span>Sort Order"
msgstr "<span>4.1. </span>並べ替え順"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:614
msgid ""
"The results of a comparison depend on the storage classes of the operands, "
"according to the following rules:"
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:617
msgid ""
"A value with storage class NULL is considered less than any other value "
"(including another value with storage class NULL)."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:620
msgid ""
"An INTEGER or REAL value is less than any TEXT or BLOB value.  When an "
"INTEGER or REAL is compared to another INTEGER or REAL, a numerical "
"comparison is performed."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:624
msgid ""
"A TEXT value is less than a BLOB value.  When two TEXT values are compared "
"an appropriate collating sequence is used to determine the result."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:628
msgid ""
"When two BLOB values are compared, the result is determined using memcmp()."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:632
msgid "<a name=\"compaff\"></a>"
msgstr "<a name=\"compaff\"></a>"

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:634
msgid "<span>4.2. </span>Type Conversions Prior To Comparison"
msgstr "<span>4.2. </span>比較前の型変換"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:636
msgid ""
"SQLite may attempt to convert values between the storage classes INTEGER, "
"REAL, and/or TEXT before performing a comparison.  Whether or not any "
"conversions are attempted before the comparison takes place depends on the "
"type affinity of the operands."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:641
msgid ""
"To \"apply affinity\" means to convert an operand to a particular storage "
"class if and only if the conversion does not lose essential information.  "
"Numeric values can always be converted into TEXT.  TEXT values can be "
"converted into numeric values if the text content is a well-formed integer "
"or real literal, but not a hexadecimal integer literal.  BLOB values are "
"converted into TEXT values by simply interpreting the binary BLOB content as "
"a text string in the current database encoding."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:650
msgid ""
"Affinity is applied to operands of a comparison operator prior to the "
"comparison according to the following rules in the order shown:"
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:654
msgid ""
"If one operand has INTEGER, REAL or NUMERIC affinity and the other operand "
"has TEXT or BLOB or no affinity then NUMERIC affinity is applied to other "
"operand."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:658
msgid ""
"If one operand has TEXT affinity and the other has no affinity, then TEXT "
"affinity is applied to the other operand."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:661
msgid "Otherwise, no affinity is applied and both operands are compared as is."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:665
msgid ""
"The expression \"a BETWEEN b AND c\" is treated as two separate binary "
"comparisons \"a &gt;= b AND a &lt;= c\", even if that means different "
"affinities are applied to 'a' in each of the comparisons.  Datatype "
"conversions in comparisons of the form \"x IN (SELECT y ...)\" are handled "
"as if the comparison were really \"x=y\".  The expression \"a IN (x, y, "
"z, ...)\" is equivalent to \"a = +x OR a = +y OR a = +z OR ...\".  In other "
"words, the values to the right of the IN operator (the \"x\", \"y\", and "
"\"z\" values in this example) are considered to have no affinity, even if "
"they happen to be column values or CAST expressions."
msgstr ""

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:678
msgid "<span>4.3. </span>Comparison Example"
msgstr "<span>4.3. </span>比較の例"

#. type: Content of: <html><body><div><p><blockquote><pre>
#: sedout/datatype3.html:682
#, no-wrap
msgid ""
"CREATE TABLE t1(\n"
"    a TEXT,      -- text affinity\n"
"    b NUMERIC,   -- numeric affinity\n"
"    c BLOB,      -- no affinity\n"
"    d            -- no affinity\n"
");\n"
"\n"
"-- Values will be stored as TEXT, INTEGER, TEXT, and INTEGER respectively\n"
"INSERT INTO t1 VALUES('500', '500', '500', 500);\n"
"SELECT typeof(a), typeof(b), typeof(c), typeof(d) FROM t1;\n"
"text|integer|text|integer\n"
"\n"
"-- Because column \"a\" has text affinity, numeric values on the\n"
"-- right-hand side of the comparisons are converted to text before\n"
"-- the comparison occurs.\n"
"SELECT a &lt; 40,   a &lt; 60,   a &lt; 600 FROM t1;\n"
"0|1|1\n"
"\n"
"-- Text affinity is applied to the right-hand operands but since\n"
"-- they are already TEXT this is a no-op; no conversions occur.\n"
"SELECT a &lt; '40', a &lt; '60', a &lt; '600' FROM t1;\n"
"0|1|1\n"
"\n"
"-- Column \"b\" has numeric affinity and so numeric affinity is applied\n"
"-- to the operands on the right.  Since the operands are already numeric,\n"
"-- the application of affinity is a no-op; no conversions occur.  All\n"
"-- values are compared numerically.\n"
"SELECT b &lt; 40,   b &lt; 60,   b &lt; 600 FROM t1;\n"
"0|0|1\n"
"\n"
"-- Numeric affinity is applied to operands on the right, converting them\n"
"-- from text to integers.  Then a numeric comparison occurs.\n"
"SELECT b &lt; '40', b &lt; '60', b &lt; '600' FROM t1;\n"
"0|0|1\n"
"\n"
"-- No affinity conversions occur.  Right-hand side values all have\n"
"-- storage class INTEGER which are always less than the TEXT values\n"
"-- on the left.\n"
"SELECT c &lt; 40,   c &lt; 60,   c &lt; 600 FROM t1;\n"
"0|0|0\n"
"\n"
"-- No affinity conversions occur.  Values are compared as TEXT.\n"
"SELECT c &lt; '40', c &lt; '60', c &lt; '600' FROM t1;\n"
"0|1|1\n"
"\n"
"-- No affinity conversions occur.  Right-hand side values all have\n"
"-- storage class INTEGER which compare numerically with the INTEGER\n"
"-- values on the left.\n"
"SELECT d &lt; 40,   d &lt; 60,   d &lt; 600 FROM t1;\n"
"0|0|1\n"
"\n"
"-- No affinity conversions occur.  INTEGER values on the left are\n"
"-- always less than TEXT values on the right.\n"
"SELECT d &lt; '40', d &lt; '60', d &lt; '600' FROM t1;\n"
"1|1|1\n"
msgstr ""
"CREATE TABLE t1(\n"
"    a TEXT,      -- TEXT好相性\n"
"    b NUMERIC,   -- NUMERIC好相性\n"
"    c BLOB,      -- 好相性なし\n"
"    d            -- 好相性なし\n"
");\n"
"\n"
"-- 値は、それぞれ TEXT、INTEGER、TEXT、INTEGER として格納されるでしょう\n"
"INSERT INTO t1 VALUES('500', '500', '500', 500);\n"
"SELECT typeof(a), typeof(b), typeof(c), typeof(d) FROM t1;\n"
"text|integer|text|integer\n"
"\n"
"-- 列 \"a\" にはTEXT好相性があるため、 \n"
"-- 比較の右側の数値は、\n"
"-- 比較が行われる前にTEXTに変換されます。\n"
"SELECT a &lt; 40,   a &lt; 60,   a &lt; 600 FROM t1;\n"
"0|1|1\n"
"\n"
"-- TEXT好相性が右側のオペランドに適用されますが、\n"
"-- それらは既に TEXT であるため、 何もしません。 変換は発生しません。\n"
"SELECT a &lt; '40', a &lt; '60', a &lt; '600' FROM t1;\n"
"0|1|1\n"
"\n"
"-- 列 \"b\" には NUMERIC 好相性があるため、 右側のオペランドに\n"
"-- NUMERIC 好相性が適用されます。 オペランドはすでに数値(NUMERIC)であるため、\n"
"-- 好相性適用操作は行われず、 変換は発生しません。\n"
"-- よって、 すべての値が数値的に比較されます。\n"
"SELECT b &lt; 40,   b &lt; 60,   b &lt; 600 FROM t1;\n"
"0|0|1\n"
"\n"
"-- 右側のオペランドにNUMERIC好相性が適用され、\n"
"-- テキストから整数に変換されます。 それに続いて数値比較が行われます。\n"
"SELECT b &lt; '40', b &lt; '60', b &lt; '600' FROM t1;\n"
"0|0|1\n"
"\n"
"-- 好相性変換は発生しません。\n"
"-- 右側の値はすべて格納クラス INTEGER を持ち、\n"
"-- 常に左側の TEXT 値よりも小さいです。\n"
"SELECT c &lt; 40,   c &lt; 60,   c &lt; 600 FROM t1;\n"
"0|0|0\n"
"\n"
"-- 好相性変換は発生しません。 値は TEXT として比較されます。\n"
"SELECT c &lt; '40', c &lt; '60', c &lt; '600' FROM t1;\n"
"0|1|1\n"
"\n"
"-- 好相性変換は発生しません。\n"
"-- 右側の値はすべて、\n"
"-- 左側の INTEGER 値と数値的に比較する、 格納クラス INTEGER を持ちます。\n"
"SELECT d &lt; 40,   d &lt; 60,   d &lt; 600 FROM t1;\n"
"0|0|1\n"
"\n"
"-- 好相性変換は発生しません。\n"
"-- 左側の INTEGER 値は、 常に右側の TEXT 値より小さくなります。\n"
"SELECT d &lt; '40', d &lt; '60', d &lt; '600' FROM t1;\n"
"1|1|1\n"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:740
msgid ""
"All of the results in the example are the same if the comparisons are "
"commuted - if expressions of the form \"a&lt;40\" are rewritten as \"40&gt;"
"a\"."
msgstr ""

#. type: Content of: <html><body><div><p><h1>
#: sedout/datatype3.html:744
msgid "<span>5. </span>Operators"
msgstr "<span>5. </span>演算子"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:746
msgid ""
"Mathematical operators (+, -, *, /, %, &lt;&lt;, &gt;&gt;, &amp;, and |) "
"interpret both operands as if they were numbers.  STRING or BLOB operands "
"automatically convert into REAL or INTEGER values.  If the STRING or BLOB "
"looks like a real number (if it has a decimal point or an exponent) or if "
"the value is outside the range that can be represented as a 64-bit signed "
"integer, then it converts to REAL.  Otherwise the operand converts to "
"INTEGER.  The implied type conversion of mathematical operands is slightly "
"different from <a href=\"lang_expr.html#castexpr\">CAST to NUMERIC</a> in "
"that string and BLOB values that look like real numbers but have no "
"fractional part are kept as REAL instead of being converted into INTEGER as "
"they would be for <a href=\"lang_expr.html#castexpr\">CAST to NUMERIC</a>.  "
"The conversion from STRING or BLOB into REAL or INTEGER is performed even if "
"it is lossy and irreversible.  Some mathematical operators (%, &lt;&lt;, &gt;"
"&gt;, &amp;, and |) expect INTEGER operands.  For those operators, REAL "
"operands are converted into INTEGER in the same way as a <a href=\"lang_expr."
"html#castexpr\">CAST to INTEGER</a>.  The &lt;&lt;, &gt;&gt;, &amp;, and | "
"operators always return an INTEGER (or NULL)  result, but the % operator "
"returns either INTEGER or REAL (or NULL)  depending on the type of its "
"operands.  A NULL operand on a mathematical operator yields a NULL result.  "
"An operand on a mathematical operator that does not look in any way numeric "
"and is not NULL is converted to 0 or 0.0.  Division by zero gives a result "
"of NULL."
msgstr ""

#. type: Content of: <html><body><div><p><h1>
#: sedout/datatype3.html:771
msgid "<span>6. </span>Sorting, Grouping and Compound SELECTs"
msgstr "<span>6. </span>並べ替え(sorting)と集計(grouping)と複合(compound)SELECT"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:773
msgid ""
"When query results are sorted by an ORDER BY clause, values with storage "
"class NULL come first, followed by INTEGER and REAL values interspersed in "
"numeric order, followed by TEXT values in collating sequence order, and "
"finally BLOB values in memcmp() order.  No storage class conversions occur "
"before the sort."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:779
msgid ""
"When grouping values with the GROUP BY clause values with different storage "
"classes are considered distinct, except for INTEGER and REAL values which "
"are considered equal if they are numerically equal. No affinities are "
"applied to any values as the result of a GROUP by clause."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:785
msgid ""
"The compound SELECT operators UNION, INTERSECT and EXCEPT perform implicit "
"comparisons between values.  No affinity is applied to comparison operands "
"for the implicit comparisons associated with UNION, INTERSECT, or EXCEPT - "
"the values are compared as is."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:791
msgid "<a name=\"collation\"></a>"
msgstr "<a name=\"collation\"></a>"

#. type: Content of: <html><body><div><p><h1>
#: sedout/datatype3.html:793
msgid "<span>7. </span>Collating Sequences"
msgstr "<span>7. </span>照合シーケンス(Collating Sequences)"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:795
msgid ""
"When SQLite compares two strings, it uses a collating sequence or collating "
"function (two terms for the same thing) to determine which string is greater "
"or if the two strings are equal.  SQLite has three built-in collating "
"functions: BINARY, NOCASE, and RTRIM."
msgstr "SQLite が 2 つの文字列を比較するとき、 照合シーケンス(collating sequence)または照合関数collating function (同じことを表す 2 つの用語) を使用して、 どちらの文字列が大きいか、 または 2 つの文字列が等しいかどうかを判断します。  SQLite には、 BINARY と NOCASE と RTRIM の 3 つの組み込み照合関数(collating functions)があります。"

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:802
msgid ""
"<b>BINARY</b> - Compares string data using memcmp(), regardless of text "
"encoding."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:804
msgid ""
"<b>NOCASE</b> - Similar to binary, except that it uses <a href=\"c3ref/"
"stricmp.html\">sqlite3_strnicmp()</a> for the comparison.  Hence the 26 "
"upper case characters of ASCII are folded to their lower case equivalents "
"before the comparison is performed.  Note that only ASCII characters are "
"case folded.  SQLite does not attempt to do full UTF case folding due to the "
"size of the tables required.  Also note that any U+0000 characters in the "
"string are considered string terminators for comparison purposes."
msgstr ""

#. type: Content of: <html><body><div><p><ul><li>
#: sedout/datatype3.html:813
msgid ""
"<b>RTRIM</b> - The same as binary, except that trailing space characters are "
"ignored."
msgstr "<b>RTRIM</b> - 末尾のスペース文字が無視されることを除いて、 BINARYと同一です。 (訳注: Right TRIM → RTRIM)"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:817
msgid ""
"An application can register additional collating functions using the <a "
"href=\"c3ref/create_collation.html\">sqlite3_create_collation()</a> "
"interface."
msgstr ""

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:820
msgid ""
"Collating functions only matter when comparing string values.  Numeric "
"values are always compared numerically, and BLOBs are always compared byte-"
"by-byte using memcmp()."
msgstr ""

#. type: Content of: <html><body><div><p><h2>
#: sedout/datatype3.html:824
msgid "<span>7.1. </span>Assigning Collating Sequences from SQL"
msgstr "<span>7.1. </span>SQL から照合シーケンスを割り当てる"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:827
msgid ""
"Every column of every table has an associated collating function.  If no "
"collating function is explicitly defined, then the collating function "
"defaults to BINARY.  The COLLATE clause of the <a href=\"lang_createtable."
"html#tablecoldef\">column definition</a> is used to define alternative "
"collating functions for a column."
msgstr ""

#. type: Content of: <html><body><div><p>
#: sedout/datatype3.html:834
msgid "<a name=\"colrules\"></a>"
msgstr "<a name=\"colrules\"></a>"

#. type: Content of: <html><body><div><p><p>
#: sedout/datatype3.html:838
msgid ""
"The rules for determining which collating function to use for a binary "
"comparison operator (=, &lt;, &gt;, &lt;=, &gt;=, !=, IS, and IS NOT) are as "
"follows:"
msgstr ""

#. type: Content of: <html><body><div><p><p><ol><li>
#: sedout/datatype3.html:843
msgid ""
"If either operand has an explicit collating function assignment using the "
"postfix <a href=\"lang_expr.html#collateop\">COLLATE operator</a>, then the "
"explicit collating function is used for comparison, with precedence to the "
"collating function of the left operand."
msgstr ""

#. type: Content of: <html><body><div><p><p><ol><li>
#: sedout/datatype3.html:848
msgid ""
"If either operand is a column, then the collating function of that column is "
"used with precedence to the left operand.  For the purposes of the previous "
"sentence, a column name preceded by one or more unary \"+\" operators and/or "
"CAST operators is still considered a column name."
msgstr ""

#. type: Content of: <html><body><div><p><p><ol><li>
#: sedout/datatype3.html:855
msgid "Otherwise, the BINARY collating function is used for comparison."
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/datatype3.html:860
msgid ""
"An operand of a comparison is considered to have an explicit collating "
"function assignment (rule 1 above)  if any subexpression of the operand uses "
"the postfix <a href=\"lang_expr.html#collateop\">COLLATE operator</a>.  "
"Thus, if a <a href=\"lang_expr.html#collateop\">COLLATE operator</a> is used "
"anywhere in a comparison expression, the collating function defined by that "
"operator is used for string comparison regardless of what table columns "
"might be a part of that expression.  If two or more <a href=\"lang_expr."
"html#collateop\">COLLATE operator</a> subexpressions appear anywhere in a "
"comparison, the left most explicit collating function is used regardless of "
"how deeply the COLLATE operators are nested in the expression and regardless "
"of how the expression is parenthesized."
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/datatype3.html:874
msgid ""
"The expression \"x BETWEEN y and z\" is logically equivalent to two "
"comparisons \"x &gt;= y AND x &lt;= z\" and works with respect to collating "
"functions as if it were two separate comparisons.  The expression \"x IN "
"(SELECT y ...)\" is handled in the same way as the expression \"x = y\" for "
"the purposes of determining the collating sequence.  The collating sequence "
"used for expressions of the form \"x IN (y, z, ...)\" is the collating "
"sequence of x.  If an explicit collating sequence is required on an IN "
"operator it should be applied to the left operand, like this: \"x COLLATE "
"nocase IN (y,z, ...)\"."
msgstr ""

#. type: Content of: <html><body><div><p><p><p>
#: sedout/datatype3.html:887
msgid ""
"Terms of the ORDER BY clause that is part of a <a href=\"lang_select."
"html\">SELECT</a> statement may be assigned a collating sequence using the "
"<a href=\"lang_expr.html#collateop\">COLLATE operator</a>, in which case the "
"specified collating function is used for sorting.  Otherwise, if the "
"expression sorted by an ORDER BY clause is a column, then the collating "
"sequence of the column is used to determine sort order. If the expression is "
"not a column and has no COLLATE clause, then the BINARY collating sequence "
"is used."
msgstr ""

#. type: Content of: <html><body><div><p><p><h2>
#: sedout/datatype3.html:897
msgid "<span>7.2. </span>Collation Sequence Examples"
msgstr "<span>7.2. </span>照合シーケンス(Collation Sequence)の例"

#. type: Content of: <html><body><div><p><p><p>
#: sedout/datatype3.html:899
msgid ""
"The examples below identify the collating sequences that would be used to "
"determine the results of text comparisons that may be performed by various "
"SQL statements. Note that a text comparison may not be required, and no "
"collating sequence used, in the case of numeric, blob or NULL values."
msgstr ""

#. type: Content of: <html><body><div><p><p><blockquote><pre>
#: sedout/datatype3.html:906
#, no-wrap
msgid ""
"CREATE TABLE t1(\n"
"    x INTEGER PRIMARY KEY,\n"
"    a,                 /* collating sequence BINARY */\n"
"    b COLLATE BINARY,  /* collating sequence BINARY */\n"
"    c COLLATE RTRIM,   /* collating sequence RTRIM  */\n"
"    d COLLATE NOCASE   /* collating sequence NOCASE */\n"
");\n"
"                   /* x   a     b     c       d */\n"
"INSERT INTO t1 VALUES(1,'abc','abc', 'abc  ','abc');\n"
"INSERT INTO t1 VALUES(2,'abc','abc', 'abc',  'ABC');\n"
"INSERT INTO t1 VALUES(3,'abc','abc', 'abc ', 'Abc');\n"
"INSERT INTO t1 VALUES(4,'abc','abc ','ABC',  'abc');\n"
" \n"
"/* Text comparison a=b is performed using the BINARY collating sequence. */\n"
"SELECT x FROM t1 WHERE a = b ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* Text comparison a=b is performed using the RTRIM collating sequence. */\n"
"SELECT x FROM t1 WHERE a = b COLLATE RTRIM ORDER BY x;\n"
"--result 1 2 3 4\n"
"\n"
"/* Text comparison d=a is performed using the NOCASE collating sequence. */\n"
"SELECT x FROM t1 WHERE d = a ORDER BY x;\n"
"--result 1 2 3 4\n"
"\n"
"/* Text comparison a=d is performed using the BINARY collating sequence. */\n"
"SELECT x FROM t1 WHERE a = d ORDER BY x;\n"
"--result 1 4\n"
"\n"
"/* Text comparison 'abc'=c is performed using the RTRIM collating sequence. */\n"
"SELECT x FROM t1 WHERE 'abc' = c ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* Text comparison c='abc' is performed using the RTRIM collating sequence. */\n"
"SELECT x FROM t1 WHERE c = 'abc' ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* Grouping is performed using the NOCASE collating sequence (Values\n"
"** 'abc', 'ABC', and 'Abc' are placed in the same group). */\n"
"SELECT count(*) FROM t1 GROUP BY d ORDER BY 1;\n"
"--result 4\n"
"\n"
"/* Grouping is performed using the BINARY collating sequence.  'abc' and\n"
"** 'ABC' and 'Abc' form different groups */\n"
"SELECT count(*) FROM t1 GROUP BY (d || '') ORDER BY 1;\n"
"--result 1 1 2\n"
"\n"
"/* Sorting or column c is performed using the RTRIM collating sequence. */\n"
"SELECT x FROM t1 ORDER BY c, x;\n"
"--result 4 1 2 3\n"
"\n"
"/* Sorting of (c||'') is performed using the BINARY collating sequence. */\n"
"SELECT x FROM t1 ORDER BY (c||''), x;\n"
"--result 4 2 3 1\n"
"\n"
"/* Sorting of column c is performed using the NOCASE collating sequence. */\n"
"SELECT x FROM t1 ORDER BY c COLLATE NOCASE, x;\n"
"--result 2 4 3 1\n"
msgstr ""
"CREATE TABLE t1(\n"
"    x INTEGER PRIMARY KEY,\n"
"    a,                 /* 照合シーケンス BINARY */\n"
"    b COLLATE BINARY,  /* 照合シーケンス BINARY */\n"
"    c COLLATE RTRIM,   /* 照合シーケンス RTRIM  */\n"
"    d COLLATE NOCASE   /* 照合シーケンス NOCASE */\n"
");\n"
"                   /* x   a     b     c       d */\n"
"INSERT INTO t1 VALUES(1,'abc','abc', 'abc  ','abc');\n"
"INSERT INTO t1 VALUES(2,'abc','abc', 'abc',  'ABC');\n"
"INSERT INTO t1 VALUES(3,'abc','abc', 'abc ', 'Abc');\n"
"INSERT INTO t1 VALUES(4,'abc','abc ','ABC',  'abc');\n"
"\n"
"/* 訳注:\n"
"1行目: c の後ろに空白2つ\n"
"2行目: d 大文字ABC\n"
"3行目: c 後ろ空白1つ、 d 大文字小文字混在\n"
"4行目: b 後ろ空白1つ、 c 大文字ABC\n"
"*/\n"
"\n"
"/* テキスト比較 a = b は、 BINARY 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE a = b ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* テキスト比較 a = b は、 RTRIM 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE a = b COLLATE RTRIM ORDER BY x;\n"
"--result 1 2 3 4\n"
"\n"
"/* テキスト比較 d = a は、NOCASE 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE d = a ORDER BY x;\n"
"--result 1 2 3 4\n"
"\n"
"/* テキスト比較 a = d は、 BINARY 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE a = d ORDER BY x;\n"
"--result 1 4\n"
"\n"
"/* テキスト比較 'abc' = c は、RTRIM 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE 'abc' = c ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* テキスト比較 c = 'abc' は、 RTRIM 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 WHERE c = 'abc' ORDER BY x;\n"
"--result 1 2 3\n"
"\n"
"/* グループ化は、 NOCASE 照合シーケンスを使用して実行されます。\n"
"** (値 'abc' と 'ABC' と 'Abc' は同一グループに配置されます) */\n"
"SELECT count(*) FROM t1 GROUP BY d ORDER BY 1;\n"
"--result 4\n"
"\n"
"/* グループ化は、 BINARY 照合シーケンスを使用して実行されます。\n"
"** 'abc' と 'ABC' と 'Abc' は異なるグループを形成します */\n"
"SELECT count(*) FROM t1 GROUP BY (d || '') ORDER BY 1;\n"
"--result 1 1 2\n"
"\n"
"/* ソートまたは列 c は、 RTRIM 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 ORDER BY c, x;\n"
"--result 4 1 2 3\n"
"\n"
"/* (c||'') のソートは、 BINARY 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 ORDER BY (c||''), x;\n"
"--result 4 2 3 1\n"
"\n"
"/* 列 c のソートは、 NOCASE 照合シーケンスを使用して実行されます。 */\n"
"SELECT x FROM t1 ORDER BY c COLLATE NOCASE, x;\n"
"--result 2 4 3 1\n"
